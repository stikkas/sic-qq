--------------------------------------------------------
--  File created - понедельник-Март-23-2015   
--------------------------------------------------------
DROP TABLE "SIC"."ADM_ACCESS_RULE" cascade constraints;
DROP TABLE "SIC"."ADM_EMPLOYEE" cascade constraints;
DROP TABLE "SIC"."ADM_GROUP" cascade constraints;
DROP TABLE "SIC"."ADM_GROUP_RULE" cascade constraints;
DROP TABLE "SIC"."ADM_USER" cascade constraints;
DROP TABLE "SIC"."ADM_USER_GROUP" cascade constraints;
DROP TABLE "SIC"."CORE_PARAMETER" cascade constraints;
DROP TABLE "SIC"."CORE_SUBSYSTEM" cascade constraints;
DROP TABLE "SIC"."DESC_DATATYPE" cascade constraints;
DROP TABLE "SIC"."DESCRIPTOR_GROUP" cascade constraints;
DROP TABLE "SIC"."DESCRIPTOR_GROUP_ATTR" cascade constraints;
DROP TABLE "SIC"."DESCRIPTOR_VALUE" cascade constraints;
DROP TABLE "SIC"."DESCRIPTOR_VALUE_ATTR" cascade constraints;
DROP DATABASE LINK "SIC"."ORG";
DROP SEQUENCE "SIC"."SEQ_ADM_ACCESS_RULE";
DROP SEQUENCE "SIC"."SEQ_ADM_EMPLOYEE";
DROP SEQUENCE "SIC"."SEQ_ADM_GROUP";
DROP SEQUENCE "SIC"."SEQ_ADM_USER";
DROP SEQUENCE "SIC"."SEQ_DESCRIPTOR_GROUP";
DROP SEQUENCE "SIC"."SEQ_DESCRIPTOR_GROUP_ATTR";
DROP SEQUENCE "SIC"."SEQ_DESCRIPTOR_VALUE";
DROP SEQUENCE "SIC"."SEQ_DESCRIPTOR_VALUE_ATTR";
DROP SEQUENCE "SIC"."SEQ_QQ_APPLICANTS";
DROP SEQUENCE "SIC"."SEQ_QQ_ATTACHED_FILE";
DROP SEQUENCE "SIC"."SEQ_QQ_COORDINATION";
DROP SEQUENCE "SIC"."SEQ_QQ_DELIVERY_ACTION";
DROP SEQUENCE "SIC"."SEQ_QQ_EXECUTION";
DROP SEQUENCE "SIC"."SEQ_QQ_NOTIFICATION";
DROP SEQUENCE "SIC"."SEQ_QQ_QUESTION";
DROP SEQUENCE "SIC"."SEQ_QQ_SEND_ACTION";
DROP SEQUENCE "SIC"."SEQ_QQ_TRANSMISSIONS";
DROP SEQUENCE "SIC"."SEQ_QQ_USED_MATERIAL";
DROP SEQUENCE "SIC"."SEQ_QQ_WAY_TO_SEND";
DROP SEQUENCE "SIC"."SEQ_SIC_QUESTION";
DROP VIEW "SIC"."V_ADM_EMPLOYEE";
DROP VIEW "SIC"."V_ADM_GROUP_RULE";
DROP VIEW "SIC"."V_ADM_USER";
DROP VIEW "SIC"."V_ADM_USER_GROUP";
DROP VIEW "SIC"."V_ADM_USER_RULE";
DROP VIEW "SIC"."V_DESC_ALL_RELATIONS";
DROP VIEW "SIC"."V_DESC_ATTR_VALUE";
DROP VIEW "SIC"."V_DESC_ATTRVALUE_WITH_CODE";
DROP VIEW "SIC"."V_DESC_GROUP";
DROP VIEW "SIC"."V_DESC_GROUP_ATTR";
DROP VIEW "SIC"."V_DESC_SUBSYSTEM";
DROP VIEW "SIC"."V_DESC_VALUE";
DROP VIEW "SIC"."V_DESC_VALUE_HIERARCH_FULL";
DROP VIEW "SIC"."V_DESC_VALUE_PATH";
DROP VIEW "SIC"."V_DESC_VALUE_WITH_CODE";
DROP FUNCTION "SIC"."MD5";
DROP FUNCTION "SIC"."QQ_GET_CONTACT";
DROP FUNCTION "SIC"."QQ_ON_INTERVAL_EXEC_COUNT";
DROP FUNCTION "SIC"."QQ_ON_INTERVAL_EXEC_NEG";
DROP FUNCTION "SIC"."QQ_ON_INTERVAL_EXEC_POS";
DROP FUNCTION "SIC"."QQ_ON_INTERVAL_EXEC_REC";
DROP FUNCTION "SIC"."QQ_ON_INTERVAL_QUERY_COUNT";
DROP FUNCTION "SIC"."QQ_ON_INTERVAL_REFUS_COUNT";
DROP FUNCTION "SIC"."QQ_ON_INTERVAL_REJECT_COUNT";
DROP FUNCTION "SIC"."QQ_VALUE_ID_BY_CODE";
DROP PACKAGE "SIC"."DESCRIPTOR_PACK";
DROP PACKAGE "SIC"."STORAGE_PACK";
DROP PACKAGE "SIC"."UPIZ_PACK";
DROP PACKAGE BODY "SIC"."DESCRIPTOR_PACK";
DROP PACKAGE BODY "SIC"."STORAGE_PACK";
DROP PACKAGE BODY "SIC"."UPIZ_PACK";
DROP PROCEDURE "SIC"."UPDATE_SIC_QUESTION";
--------------------------------------------------------
--  DDL for DB Link ORG
--------------------------------------------------------

  CREATE DATABASE LINK "ORG"
   USING 'ORG';
--------------------------------------------------------
--  DDL for Sequence SEQ_ADM_ACCESS_RULE
--------------------------------------------------------

   CREATE SEQUENCE  "SIC"."SEQ_ADM_ACCESS_RULE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 81 CACHE 20 ORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ADM_EMPLOYEE
--------------------------------------------------------

   CREATE SEQUENCE  "SIC"."SEQ_ADM_EMPLOYEE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 401 CACHE 20 ORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ADM_GROUP
--------------------------------------------------------

   CREATE SEQUENCE  "SIC"."SEQ_ADM_GROUP"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 ORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_ADM_USER
--------------------------------------------------------

   CREATE SEQUENCE  "SIC"."SEQ_ADM_USER"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 581 CACHE 20 ORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_DESCRIPTOR_GROUP
--------------------------------------------------------

   CREATE SEQUENCE  "SIC"."SEQ_DESCRIPTOR_GROUP"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 141 CACHE 20 ORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_DESCRIPTOR_GROUP_ATTR
--------------------------------------------------------

   CREATE SEQUENCE  "SIC"."SEQ_DESCRIPTOR_GROUP_ATTR"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 101 CACHE 20 ORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_DESCRIPTOR_VALUE
--------------------------------------------------------

   CREATE SEQUENCE  "SIC"."SEQ_DESCRIPTOR_VALUE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 349 CACHE 20 ORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_DESCRIPTOR_VALUE_ATTR
--------------------------------------------------------

   CREATE SEQUENCE  "SIC"."SEQ_DESCRIPTOR_VALUE_ATTR"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 99 CACHE 20 ORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_QQ_APPLICANTS
--------------------------------------------------------

   CREATE SEQUENCE  "SIC"."SEQ_QQ_APPLICANTS"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_QQ_ATTACHED_FILE
--------------------------------------------------------

   CREATE SEQUENCE  "SIC"."SEQ_QQ_ATTACHED_FILE"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1261 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_QQ_COORDINATION
--------------------------------------------------------

   CREATE SEQUENCE  "SIC"."SEQ_QQ_COORDINATION"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 721 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_QQ_DELIVERY_ACTION
--------------------------------------------------------

   CREATE SEQUENCE  "SIC"."SEQ_QQ_DELIVERY_ACTION"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 3101 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_QQ_EXECUTION
--------------------------------------------------------

   CREATE SEQUENCE  "SIC"."SEQ_QQ_EXECUTION"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_QQ_NOTIFICATION
--------------------------------------------------------

   CREATE SEQUENCE  "SIC"."SEQ_QQ_NOTIFICATION"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_QQ_QUESTION
--------------------------------------------------------

   CREATE SEQUENCE  "SIC"."SEQ_QQ_QUESTION"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4901 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_QQ_SEND_ACTION
--------------------------------------------------------

   CREATE SEQUENCE  "SIC"."SEQ_QQ_SEND_ACTION"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2601 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_QQ_TRANSMISSIONS
--------------------------------------------------------

   CREATE SEQUENCE  "SIC"."SEQ_QQ_TRANSMISSIONS"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_QQ_USED_MATERIAL
--------------------------------------------------------

   CREATE SEQUENCE  "SIC"."SEQ_QQ_USED_MATERIAL"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 181 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_QQ_WAY_TO_SEND
--------------------------------------------------------

   CREATE SEQUENCE  "SIC"."SEQ_QQ_WAY_TO_SEND"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence SEQ_SIC_QUESTION
--------------------------------------------------------

   CREATE SEQUENCE  "SIC"."SEQ_SIC_QUESTION"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4984 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Table ADM_ACCESS_RULE
--------------------------------------------------------

  CREATE TABLE "SIC"."ADM_ACCESS_RULE" 
   (	"ACCESS_RULE_ID" NUMBER(10,0), 
	"SUBSYSTEM_NUMBER" NUMBER(10,0), 
	"RULE_CODE" VARCHAR2(30 BYTE), 
	"RULE_NAME" VARCHAR2(250 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "SIC"."ADM_ACCESS_RULE"."ACCESS_RULE_ID" IS 'ID права доступа';
 
   COMMENT ON COLUMN "SIC"."ADM_ACCESS_RULE"."SUBSYSTEM_NUMBER" IS 'Номер подсистемы';
 
   COMMENT ON COLUMN "SIC"."ADM_ACCESS_RULE"."RULE_CODE" IS 'Код права доступа';
 
   COMMENT ON COLUMN "SIC"."ADM_ACCESS_RULE"."RULE_NAME" IS 'Наименование права доступа';
 
   COMMENT ON TABLE "SIC"."ADM_ACCESS_RULE"  IS 'Право доступа';
--------------------------------------------------------
--  DDL for Table ADM_EMPLOYEE
--------------------------------------------------------

  CREATE TABLE "SIC"."ADM_EMPLOYEE" 
   (	"EMPLOYEE_ID" NUMBER(10,0), 
	"USER_ID" NUMBER(10,0), 
	"DEPARTMENT_ID" NUMBER(10,0), 
	"POSITION_ID" NUMBER(10,0), 
	"LAST_NAME" VARCHAR2(150 BYTE), 
	"FIRST_NAME" VARCHAR2(150 BYTE), 
	"MIDDLE_NAME" VARCHAR2(150 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "SIC"."ADM_EMPLOYEE"."EMPLOYEE_ID" IS 'ID сотрудника архива';
 
   COMMENT ON COLUMN "SIC"."ADM_EMPLOYEE"."USER_ID" IS 'ID пользователя';
 
   COMMENT ON COLUMN "SIC"."ADM_EMPLOYEE"."DEPARTMENT_ID" IS 'Структурное подразделение';
 
   COMMENT ON COLUMN "SIC"."ADM_EMPLOYEE"."POSITION_ID" IS 'Должность';
 
   COMMENT ON COLUMN "SIC"."ADM_EMPLOYEE"."LAST_NAME" IS 'Фамилия';
 
   COMMENT ON COLUMN "SIC"."ADM_EMPLOYEE"."FIRST_NAME" IS 'Имя';
 
   COMMENT ON COLUMN "SIC"."ADM_EMPLOYEE"."MIDDLE_NAME" IS 'Отчество';
 
   COMMENT ON TABLE "SIC"."ADM_EMPLOYEE"  IS 'Сотрудник архива';
--------------------------------------------------------
--  DDL for Table ADM_GROUP
--------------------------------------------------------

  CREATE TABLE "SIC"."ADM_GROUP" 
   (	"GROUP_ID" NUMBER(10,0), 
	"GROUP_NAME" VARCHAR2(250 BYTE), 
	"GROUP_NOTE" VARCHAR2(1000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "SIC"."ADM_GROUP"."GROUP_ID" IS 'ID группы пользователей';
 
   COMMENT ON COLUMN "SIC"."ADM_GROUP"."GROUP_NAME" IS 'Наименование группы';
 
   COMMENT ON COLUMN "SIC"."ADM_GROUP"."GROUP_NOTE" IS 'Описание группы';
 
   COMMENT ON TABLE "SIC"."ADM_GROUP"  IS 'Группа пользователей';
--------------------------------------------------------
--  DDL for Table ADM_GROUP_RULE
--------------------------------------------------------

  CREATE TABLE "SIC"."ADM_GROUP_RULE" 
   (	"GROUP_ID" NUMBER(10,0), 
	"ACCESS_RULE_ID" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "SIC"."ADM_GROUP_RULE"."GROUP_ID" IS 'ID группы пользователей';
 
   COMMENT ON COLUMN "SIC"."ADM_GROUP_RULE"."ACCESS_RULE_ID" IS 'ID права доступа';
 
   COMMENT ON TABLE "SIC"."ADM_GROUP_RULE"  IS 'Назначение группам прав';
--------------------------------------------------------
--  DDL for Table ADM_USER
--------------------------------------------------------

  CREATE TABLE "SIC"."ADM_USER" 
   (	"USER_ID" NUMBER(10,0), 
	"USER_TYPE_ID" NUMBER(10,0), 
	"LOGIN" VARCHAR2(30 BYTE), 
	"PASSWORD" VARCHAR2(100 BYTE), 
	"IS_BLOCKED" NUMBER(1,0), 
	"DISPLAYED_NAME" VARCHAR2(150 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "SIC"."ADM_USER"."USER_ID" IS 'ID пользователя';
 
   COMMENT ON COLUMN "SIC"."ADM_USER"."USER_TYPE_ID" IS 'Тип пользователя';
 
   COMMENT ON COLUMN "SIC"."ADM_USER"."LOGIN" IS 'Логин';
 
   COMMENT ON COLUMN "SIC"."ADM_USER"."PASSWORD" IS 'Пароль';
 
   COMMENT ON COLUMN "SIC"."ADM_USER"."IS_BLOCKED" IS 'Признак блокировки';
 
   COMMENT ON COLUMN "SIC"."ADM_USER"."DISPLAYED_NAME" IS 'Отображаемое имя';
 
   COMMENT ON TABLE "SIC"."ADM_USER"  IS 'Пользователь АИС';
--------------------------------------------------------
--  DDL for Table ADM_USER_GROUP
--------------------------------------------------------

  CREATE TABLE "SIC"."ADM_USER_GROUP" 
   (	"USER_ID" NUMBER(10,0), 
	"GROUP_ID" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "SIC"."ADM_USER_GROUP"."USER_ID" IS 'ID пользователя';
 
   COMMENT ON COLUMN "SIC"."ADM_USER_GROUP"."GROUP_ID" IS 'ID группы пользователей';
 
   COMMENT ON TABLE "SIC"."ADM_USER_GROUP"  IS 'Вхождение пользователей в группы';
--------------------------------------------------------
--  DDL for Table CORE_PARAMETER
--------------------------------------------------------

  CREATE TABLE "SIC"."CORE_PARAMETER" 
   (	"PARAMETER_CODE" VARCHAR2(30 BYTE), 
	"SUBSYSTEM_NUMBER" NUMBER(10,0), 
	"PARAMETER_NAME" VARCHAR2(250 BYTE), 
	"PARAMETER_DESCRIPTION" VARCHAR2(1000 BYTE), 
	"PARAMETER_VALUE" VARCHAR2(4000 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "SIC"."CORE_PARAMETER"."PARAMETER_CODE" IS 'Код параметра системы';
 
   COMMENT ON COLUMN "SIC"."CORE_PARAMETER"."SUBSYSTEM_NUMBER" IS 'Номер подсистемы';
 
   COMMENT ON COLUMN "SIC"."CORE_PARAMETER"."PARAMETER_NAME" IS 'Наименование параметра';
 
   COMMENT ON COLUMN "SIC"."CORE_PARAMETER"."PARAMETER_DESCRIPTION" IS 'Описание параметра';
 
   COMMENT ON COLUMN "SIC"."CORE_PARAMETER"."PARAMETER_VALUE" IS 'Значение параметра';
 
   COMMENT ON TABLE "SIC"."CORE_PARAMETER"  IS 'Параметр системы';
--------------------------------------------------------
--  DDL for Table CORE_SUBSYSTEM
--------------------------------------------------------

  CREATE TABLE "SIC"."CORE_SUBSYSTEM" 
   (	"SUBSYSTEM_NUMBER" NUMBER(10,0), 
	"SUBSYSTEM_NAME" VARCHAR2(300 BYTE), 
	"SUBSYSTEM_CODE" VARCHAR2(30 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "SIC"."CORE_SUBSYSTEM"."SUBSYSTEM_NUMBER" IS 'Номер подсистемы';
 
   COMMENT ON COLUMN "SIC"."CORE_SUBSYSTEM"."SUBSYSTEM_NAME" IS 'Наименование подсистемы';
 
   COMMENT ON COLUMN "SIC"."CORE_SUBSYSTEM"."SUBSYSTEM_CODE" IS 'Код подсистемы';
 
   COMMENT ON TABLE "SIC"."CORE_SUBSYSTEM"  IS 'Подсистема АИС';
--------------------------------------------------------
--  DDL for Table DESC_DATATYPE
--------------------------------------------------------

  CREATE TABLE "SIC"."DESC_DATATYPE" 
   (	"DATATYPE_CODE" VARCHAR2(30 BYTE), 
	"TYPE_NAME" VARCHAR2(100 BYTE), 
	"SORT_ORDER" NUMBER(5,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "SIC"."DESC_DATATYPE"."DATATYPE_CODE" IS 'Код типа данных';
 
   COMMENT ON COLUMN "SIC"."DESC_DATATYPE"."TYPE_NAME" IS 'Наименование типа данных';
 
   COMMENT ON COLUMN "SIC"."DESC_DATATYPE"."SORT_ORDER" IS 'Порядковый номер';
 
   COMMENT ON TABLE "SIC"."DESC_DATATYPE"  IS 'Тип данных';
--------------------------------------------------------
--  DDL for Table DESCRIPTOR_GROUP
--------------------------------------------------------

  CREATE TABLE "SIC"."DESCRIPTOR_GROUP" 
   (	"DESCRIPTOR_GROUP_ID" NUMBER(10,0), 
	"SUBSYSTEM_NUMBER" NUMBER(10,0), 
	"GROUP_NAME" VARCHAR2(300 BYTE), 
	"GROUP_CODE" VARCHAR2(30 BYTE), 
	"SORT_ORDER" NUMBER(5,0), 
	"IS_SYSTEM" NUMBER(1,0), 
	"IS_HIERARCHICAL" NUMBER(1,0), 
	"SHORT_VALUE_SUPPORTED" NUMBER(1,0), 
	"ALPHABETIC_SORT" NUMBER(1,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "SIC"."DESCRIPTOR_GROUP"."DESCRIPTOR_GROUP_ID" IS 'ID справочника системы';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_GROUP"."SUBSYSTEM_NUMBER" IS 'Номер подсистемы (для системных)';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_GROUP"."GROUP_NAME" IS 'Наименование справочника';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_GROUP"."GROUP_CODE" IS 'Код справочника (для системных)';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_GROUP"."SORT_ORDER" IS 'Порядковый номер';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_GROUP"."IS_SYSTEM" IS 'Признак системности';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_GROUP"."IS_HIERARCHICAL" IS 'Признак иерархичности структуры';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_GROUP"."SHORT_VALUE_SUPPORTED" IS 'Наличие сокращённых значений';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_GROUP"."ALPHABETIC_SORT" IS 'Сортировка по алфавиту';
 
   COMMENT ON TABLE "SIC"."DESCRIPTOR_GROUP"  IS 'Справочник системы';
--------------------------------------------------------
--  DDL for Table DESCRIPTOR_GROUP_ATTR
--------------------------------------------------------

  CREATE TABLE "SIC"."DESCRIPTOR_GROUP_ATTR" 
   (	"DESCRIPTOR_GROUP_ATTR_ID" NUMBER(10,0), 
	"DESCRIPTOR_GROUP_ID" NUMBER(10,0), 
	"DATATYPE_CODE" VARCHAR2(30 BYTE), 
	"ATTR_NAME" VARCHAR2(300 BYTE), 
	"ATTR_CODE" VARCHAR2(30 BYTE), 
	"SORT_ORDER" NUMBER(5,0), 
	"IS_COLLECTION" NUMBER(1,0), 
	"IS_REQUIRED" NUMBER(1,0), 
	"REF_DESCRIPTOR_GROUP_ID" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "SIC"."DESCRIPTOR_GROUP_ATTR"."DESCRIPTOR_GROUP_ATTR_ID" IS 'ID атрибута справочника';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_GROUP_ATTR"."DESCRIPTOR_GROUP_ID" IS 'ID справочника';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_GROUP_ATTR"."DATATYPE_CODE" IS 'Код типа данных';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_GROUP_ATTR"."ATTR_NAME" IS 'Наименование атрибута';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_GROUP_ATTR"."ATTR_CODE" IS 'Код атрибута';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_GROUP_ATTR"."SORT_ORDER" IS 'Порядковый номер';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_GROUP_ATTR"."IS_COLLECTION" IS 'Признак множественности';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_GROUP_ATTR"."IS_REQUIRED" IS 'Признак обязательности';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_GROUP_ATTR"."REF_DESCRIPTOR_GROUP_ID" IS 'Ссылка на справочник значений атрибута';
 
   COMMENT ON TABLE "SIC"."DESCRIPTOR_GROUP_ATTR"  IS 'Атрибут справочника';
--------------------------------------------------------
--  DDL for Table DESCRIPTOR_VALUE
--------------------------------------------------------

  CREATE TABLE "SIC"."DESCRIPTOR_VALUE" 
   (	"DESCRIPTOR_VALUE_ID" NUMBER(10,0), 
	"DESCRIPTOR_GROUP_ID" NUMBER(10,0), 
	"FULL_VALUE" VARCHAR2(4000 BYTE), 
	"SHORT_VALUE" VARCHAR2(250 BYTE), 
	"VALUE_CODE" VARCHAR2(30 BYTE), 
	"SORT_ORDER" NUMBER(10,0), 
	"PARENT_VALUE_ID" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "SIC"."DESCRIPTOR_VALUE"."DESCRIPTOR_VALUE_ID" IS 'ID значения справочника';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_VALUE"."DESCRIPTOR_GROUP_ID" IS 'ID справочника';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_VALUE"."FULL_VALUE" IS 'Полное значение';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_VALUE"."SHORT_VALUE" IS 'Сокращённое значение';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_VALUE"."VALUE_CODE" IS 'Код значения';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_VALUE"."SORT_ORDER" IS 'Порядковый номер';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_VALUE"."PARENT_VALUE_ID" IS 'ID вышестоящего значения';
 
   COMMENT ON TABLE "SIC"."DESCRIPTOR_VALUE"  IS 'Значение справочника';
--------------------------------------------------------
--  DDL for Table DESCRIPTOR_VALUE_ATTR
--------------------------------------------------------

  CREATE TABLE "SIC"."DESCRIPTOR_VALUE_ATTR" 
   (	"DESCRIPTOR_VALUE_ATTR_ID" NUMBER(10,0), 
	"DESCRIPTOR_VALUE_ID" NUMBER(10,0), 
	"DESCRIPTOR_GROUP_ATTR_ID" NUMBER(10,0), 
	"ATTR_VALUE" VARCHAR2(4000 BYTE), 
	"REF_DESCRIPTOR_VALUE_ID" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
 

   COMMENT ON COLUMN "SIC"."DESCRIPTOR_VALUE_ATTR"."DESCRIPTOR_VALUE_ATTR_ID" IS 'ID атрибута значения справочника';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_VALUE_ATTR"."DESCRIPTOR_VALUE_ID" IS 'ID значения справочника';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_VALUE_ATTR"."DESCRIPTOR_GROUP_ATTR_ID" IS 'ID атрибута справочника';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_VALUE_ATTR"."ATTR_VALUE" IS 'Значение атрибута';
 
   COMMENT ON COLUMN "SIC"."DESCRIPTOR_VALUE_ATTR"."REF_DESCRIPTOR_VALUE_ID" IS 'Ссылка на другое значение справочника';
 
   COMMENT ON TABLE "SIC"."DESCRIPTOR_VALUE_ATTR"  IS 'Атрибут значения справочника';
--------------------------------------------------------
--  DDL for View V_ADM_EMPLOYEE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "SIC"."V_ADM_EMPLOYEE" ("EMPLOYEE_ID", "USER_ID", "DEPARTMENT", "POSITION", "LAST_NAME", "FIRST_NAME", "MIDDLE_NAME") AS 
  select AE.EMPLOYEE_ID, AE.USER_ID, DV1.FULL_VALUE as DEPARTMENT,
       DV2.FULL_VALUE as POSITION, AE.LAST_NAME, AE.FIRST_NAME, AE.MIDDLE_NAME
  from ADM_EMPLOYEE AE
 inner join DESCRIPTOR_VALUE DV1
         on AE.DEPARTMENT_ID = DV1.DESCRIPTOR_VALUE_ID
 inner join DESCRIPTOR_VALUE DV2
         on AE.POSITION_ID = DV2.DESCRIPTOR_VALUE_ID
 
 ;
--------------------------------------------------------
--  DDL for View V_ADM_GROUP_RULE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "SIC"."V_ADM_GROUP_RULE" ("GROUP_ID", "ACCESS_RULE_ID", "SUBSYSTEM_NAME", "RULE_NAME") AS 
  select AGR.GROUP_ID, AAR.ACCESS_RULE_ID, CS.SUBSYSTEM_NAME, AAR.RULE_NAME
  from ADM_GROUP_RULE AGR
 inner join ADM_ACCESS_RULE AAR
         on AGR.ACCESS_RULE_ID = AAR.ACCESS_RULE_ID
 inner join CORE_SUBSYSTEM CS
         on AAR.SUBSYSTEM_NUMBER = CS.SUBSYSTEM_NUMBER
 
 ;
--------------------------------------------------------
--  DDL for View V_ADM_USER
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "SIC"."V_ADM_USER" ("USER_ID", "DISPLAYED_NAME", "LOGIN", "USER_TYPE_ID", "USER_TYPE", "IS_BLOCKED", "USER_STATUS", "DEPARTMENT_ID") AS 
  select AU.USER_ID, AU.DISPLAYED_NAME, AU.LOGIN, AU.USER_TYPE_ID,
       DV.FULL_VALUE as USER_TYPE, AU.IS_BLOCKED,
       decode(AU.IS_BLOCKED,
              0, 'Активен',
              1, 'Заблокирован') as USER_STATUS,
       AE.DEPARTMENT_ID
  from ADM_USER AU
 inner join DESCRIPTOR_VALUE DV
         on AU.USER_TYPE_ID = DV.DESCRIPTOR_VALUE_ID
  left join ADM_EMPLOYEE AE
         on AU.USER_ID = AE.USER_ID
 
 ;
--------------------------------------------------------
--  DDL for View V_ADM_USER_GROUP
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "SIC"."V_ADM_USER_GROUP" ("USER_ID", "GROUP_ID", "GROUP_NAME") AS 
  select AUG.USER_ID, AG.GROUP_ID, AG.GROUP_NAME
  from ADM_USER_GROUP AUG
 inner join ADM_GROUP AG
         on AUG.GROUP_ID = AG.GROUP_ID
 
 ;
--------------------------------------------------------
--  DDL for View V_ADM_USER_RULE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "SIC"."V_ADM_USER_RULE" ("USER_ID", "LOGIN", "IS_BLOCKED", "DISPLAYED_NAME", "RULE_CODE") AS 
  SELECT DISTINCT au.user_id,
         au.login,
         au.is_blocked,
         au.displayed_name,
         aar.rule_code
  FROM adm_user au
       JOIN adm_user_group aug ON au.user_id = aug.user_id
       JOIN adm_group_rule agr ON aug.group_id = agr.group_id
       JOIN adm_access_rule aar ON agr.access_rule_id = aar.access_rule_id;
--------------------------------------------------------
--  DDL for View V_DESC_ALL_RELATIONS
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "SIC"."V_DESC_ALL_RELATIONS" ("DESCRIPTOR_VALUE_ID", "RELATED_VALUE_ID") AS 
  select CHILD_VALUE_ID  as DESCRIPTOR_VALUE_ID,
       PARENT_VALUE_ID as RELATED_VALUE_ID
  from V_DESC_VALUE_HIERARCH_FULL
 union all
select PARENT_VALUE_ID as DESCRIPTOR_VALUE_ID,
       CHILD_VALUE_ID  as RELATED_VALUE_ID
  from V_DESC_VALUE_HIERARCH_FULL
 
 ;
--------------------------------------------------------
--  DDL for View V_DESC_ATTR_VALUE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "SIC"."V_DESC_ATTR_VALUE" ("DESCRIPTOR_VALUE_ATTR_ID", "DESCRIPTOR_VALUE_ID", "ATTR_CODE", "IS_COLLECTION", "ATTR_VALUE") AS 
  (
 SELECT dva.descriptor_value_attr_id, dva.descriptor_value_id, dga.attr_code, dga.is_collection, COALESCE(dva.attr_value, dv.value_code) AS attr_value
   FROM descriptor_value_attr dva
   JOIN descriptor_group_attr dga ON dva.descriptor_group_attr_id = dga.descriptor_group_attr_id
   LEFT JOIN descriptor_value dv ON dva.ref_descriptor_value_id = dv.descriptor_value_id
);
--------------------------------------------------------
--  DDL for View V_DESC_ATTRVALUE_WITH_CODE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "SIC"."V_DESC_ATTRVALUE_WITH_CODE" ("DESCRIPTOR_VALUE_ATTR_ID", "DESCRIPTOR_VALUE_ID", "DATATYPE_CODE", "ATTR_CODE", "ATTR_VALUE", "REF_DESCRIPTOR_VALUE_ID") AS 
  select DVA.DESCRIPTOR_VALUE_ATTR_ID, DVA.DESCRIPTOR_VALUE_ID, DGA.DATATYPE_CODE,
       DGA.ATTR_CODE, DVA.ATTR_VALUE, DVA.REF_DESCRIPTOR_VALUE_ID
  from DESCRIPTOR_VALUE_ATTR DVA
 inner join DESCRIPTOR_GROUP_ATTR DGA
         on DVA.DESCRIPTOR_GROUP_ATTR_ID = DGA.DESCRIPTOR_GROUP_ATTR_ID
 
 ;
--------------------------------------------------------
--  DDL for View V_DESC_GROUP
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "SIC"."V_DESC_GROUP" ("DESCRIPTOR_GROUP_ID", "SUBSYSTEM_NUMBER", "SUBSYSTEM_NAME", "GROUP_NAME", "GROUP_CODE", "SORT_ORDER", "IS_SYSTEM", "IS_HIERARCHICAL", "SHORT_VALUE_SUPPORTED", "ALPHABETIC_SORT", "VALUE_CNT") AS 
  select DG.DESCRIPTOR_GROUP_ID, CS.SUBSYSTEM_NUMBER, CS.SUBSYSTEM_NAME,
       DG.GROUP_NAME, DG.GROUP_CODE, DG.SORT_ORDER, DG.IS_SYSTEM,
       DG.IS_HIERARCHICAL, DG.SHORT_VALUE_SUPPORTED, DG.ALPHABETIC_SORT,
       count(DV.DESCRIPTOR_GROUP_ID) as VALUE_CNT
  from DESCRIPTOR_GROUP DG
  left join CORE_SUBSYSTEM CS
         on DG.SUBSYSTEM_NUMBER = CS.SUBSYSTEM_NUMBER
  left join DESCRIPTOR_VALUE DV
         on DG.DESCRIPTOR_GROUP_ID = DV.DESCRIPTOR_GROUP_ID
        and DV.PARENT_VALUE_ID is null
 group by DG.DESCRIPTOR_GROUP_ID, CS.SUBSYSTEM_NUMBER, CS.SUBSYSTEM_NAME,
          DG.GROUP_NAME, DG.GROUP_CODE, DG.SORT_ORDER, DG.IS_SYSTEM,
          DG.IS_HIERARCHICAL, DG.SHORT_VALUE_SUPPORTED, DG.ALPHABETIC_SORT,
          DV.DESCRIPTOR_GROUP_ID
 
 ;
--------------------------------------------------------
--  DDL for View V_DESC_GROUP_ATTR
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "SIC"."V_DESC_GROUP_ATTR" ("DESCRIPTOR_GROUP_ATTR_ID", "DESCRIPTOR_GROUP_ID", "ATTR_NAME", "ATTR_CODE", "DATATYPE_CODE", "DATATYPE", "SORT_ORDER", "IS_REQUIRED", "IS_COLLECTION", "REF_DESCRIPTOR_GROUP_ID", "REF_GROUP_NAME", "HAS_VALUES") AS 
  select DGA.DESCRIPTOR_GROUP_ATTR_ID, DGA.DESCRIPTOR_GROUP_ID,
       DGA.ATTR_NAME, DGA.ATTR_CODE, DD.DATATYPE_CODE,
       DD.TYPE_NAME || decode(DD.DATATYPE_CODE,
                              'DESCRIPTOR', ' (' || DG.GROUP_NAME || ')',
                              null) as DATATYPE,
       DGA.SORT_ORDER, DGA.IS_REQUIRED, DGA.IS_COLLECTION,
       DGA.REF_DESCRIPTOR_GROUP_ID, DG.GROUP_NAME as REF_GROUP_NAME,
       decode(count(DVA.ATTR_VALUE) + count(DVA.REF_DESCRIPTOR_VALUE_ID),
              0, 0, 1) as HAS_VALUES
  from DESCRIPTOR_GROUP_ATTR DGA
 inner join DESC_DATATYPE DD
         on DGA.DATATYPE_CODE = DD.DATATYPE_CODE
  left join DESCRIPTOR_GROUP DG
         on DGA.REF_DESCRIPTOR_GROUP_ID = DG.DESCRIPTOR_GROUP_ID
  left join DESCRIPTOR_VALUE_ATTR DVA
         on DGA.DESCRIPTOR_GROUP_ATTR_ID = DVA.DESCRIPTOR_GROUP_ATTR_ID
 group by DGA.DESCRIPTOR_GROUP_ATTR_ID, DGA.DESCRIPTOR_GROUP_ID,
          DGA.ATTR_NAME, DGA.ATTR_CODE, DD.DATATYPE_CODE,
          DD.TYPE_NAME, DG.GROUP_NAME, DGA.SORT_ORDER, DGA.IS_REQUIRED,
          DGA.IS_COLLECTION, DGA.REF_DESCRIPTOR_GROUP_ID
 
 ;
--------------------------------------------------------
--  DDL for View V_DESC_SUBSYSTEM
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "SIC"."V_DESC_SUBSYSTEM" ("SUBSYSTEM_NUMBER", "SUBSYSTEM_NAME", "HAS_GROUPS", "GROUP_CNT") AS 
  select CS.SUBSYSTEM_NUMBER, CS.SUBSYSTEM_NAME,
       decode(DG.SUBSYSTEM_NUMBER, null, 0, 1) as HAS_GROUPS,
       count(DG.DESCRIPTOR_GROUP_ID) as GROUP_CNT
  from CORE_SUBSYSTEM CS
  left join DESCRIPTOR_GROUP DG
         on CS.SUBSYSTEM_NUMBER = DG.SUBSYSTEM_NUMBER
 group by CS.SUBSYSTEM_NUMBER, CS.SUBSYSTEM_NAME, DG.SUBSYSTEM_NUMBER
 order by CS.SUBSYSTEM_NUMBER
 
 ;
--------------------------------------------------------
--  DDL for View V_DESC_VALUE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "SIC"."V_DESC_VALUE" ("DESCRIPTOR_VALUE_ID", "DESCRIPTOR_GROUP_ID", "GROUP_NAME", "FULL_VALUE", "SHORT_VALUE", "VALUE_CODE", "SORT_ORDER", "PARENT_VALUE_ID", "HAS_CHILDREN", "CHILDREN_CNT") AS 
  select DV.DESCRIPTOR_VALUE_ID, DG.DESCRIPTOR_GROUP_ID, DG.GROUP_NAME,
       DV.FULL_VALUE, DV.SHORT_VALUE, DV.VALUE_CODE,
       DV.SORT_ORDER, DV.PARENT_VALUE_ID,
       decode(DV_CH.PARENT_VALUE_ID, null, 0, 1) as HAS_CHILDREN,
       count(DV_CH.DESCRIPTOR_VALUE_ID) as CHILDREN_CNT
  from DESCRIPTOR_VALUE DV
 inner join DESCRIPTOR_GROUP DG
         on DV.DESCRIPTOR_GROUP_ID = DG.DESCRIPTOR_GROUP_ID
  left join DESCRIPTOR_VALUE DV_CH
         on DV.DESCRIPTOR_VALUE_ID = DV_CH.PARENT_VALUE_ID
 group by DV.DESCRIPTOR_VALUE_ID, DG.DESCRIPTOR_GROUP_ID, DG.GROUP_NAME,
       DG.IS_HIERARCHICAL, DV.FULL_VALUE, DV.SHORT_VALUE, DV.VALUE_CODE,
       DV.SORT_ORDER, DV.PARENT_VALUE_ID, DV_CH.PARENT_VALUE_ID
 
 ;
--------------------------------------------------------
--  DDL for View V_DESC_VALUE_HIERARCH_FULL
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "SIC"."V_DESC_VALUE_HIERARCH_FULL" ("CHILD_VALUE_ID", "PARENT_VALUE_ID", "VALUE_LEVEL") AS 
  select  DESCRIPTOR_VALUE_ID as CHILD_VALUE_ID,
        CONNECT_BY_ROOT DESCRIPTOR_VALUE_ID as PARENT_VALUE_ID,
        LEVEL as VALUE_LEVEL
   from DESCRIPTOR_VALUE
connect by prior DESCRIPTOR_VALUE_ID = PARENT_VALUE_ID
 
 ;
--------------------------------------------------------
--  DDL for View V_DESC_VALUE_PATH
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "SIC"."V_DESC_VALUE_PATH" ("DESCRIPTOR_VALUE_ID", "DESCRIPTOR_GROUP_ID", "FULL_VALUE", "SHORT_VALUE", "FULL_PATH", "SHORT_PATH", "ID_PATH") AS 
  select DESCRIPTOR_VALUE_ID, DESCRIPTOR_GROUP_ID, FULL_VALUE, SHORT_VALUE,
       DESCRIPTOR_PACK.GET_FULL_PATH(DESCRIPTOR_VALUE_ID) as FULL_PATH,
       DESCRIPTOR_PACK.GET_SHORT_PATH(DESCRIPTOR_VALUE_ID) as SHORT_PATH,
       DESCRIPTOR_PACK.GET_ID_PATH(DESCRIPTOR_VALUE_ID) as ID_PATH
  from DESCRIPTOR_VALUE
 
 ;
--------------------------------------------------------
--  DDL for View V_DESC_VALUE_WITH_CODE
--------------------------------------------------------

  CREATE OR REPLACE FORCE VIEW "SIC"."V_DESC_VALUE_WITH_CODE" ("GROUP_CODE", "DESCRIPTOR_VALUE_ID", "FULL_VALUE", "VALUE_CODE", "SORT_ORDER") AS 
  select DG.GROUP_CODE, DV.DESCRIPTOR_VALUE_ID, DV.FULL_VALUE, DV.VALUE_CODE,
       DV.SORT_ORDER
  from DESCRIPTOR_VALUE DV
 inner join DESCRIPTOR_GROUP DG
         on DV.DESCRIPTOR_GROUP_ID = DG.DESCRIPTOR_GROUP_ID
 where DG.IS_HIERARCHICAL = 0
 
 ;
--------------------------------------------------------
--  DDL for Index PK_ADM_ACCESS_RULE
--------------------------------------------------------

  CREATE UNIQUE INDEX "SIC"."PK_ADM_ACCESS_RULE" ON "SIC"."ADM_ACCESS_RULE" ("ACCESS_RULE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index FK_CORSYS_ADMACCRUL
--------------------------------------------------------

  CREATE INDEX "SIC"."FK_CORSYS_ADMACCRUL" ON "SIC"."ADM_ACCESS_RULE" ("SUBSYSTEM_NUMBER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_ADM_EMPLOYEE
--------------------------------------------------------

  CREATE UNIQUE INDEX "SIC"."PK_ADM_EMPLOYEE" ON "SIC"."ADM_EMPLOYEE" ("EMPLOYEE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index FK_ADMUSR_ADMEMP
--------------------------------------------------------

  CREATE INDEX "SIC"."FK_ADMUSR_ADMEMP" ON "SIC"."ADM_EMPLOYEE" ("USER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index FK_EMPDEP_ADMEMP
--------------------------------------------------------

  CREATE INDEX "SIC"."FK_EMPDEP_ADMEMP" ON "SIC"."ADM_EMPLOYEE" ("DEPARTMENT_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index FK_EMPPOS_ADMEMP
--------------------------------------------------------

  CREATE INDEX "SIC"."FK_EMPPOS_ADMEMP" ON "SIC"."ADM_EMPLOYEE" ("POSITION_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_ADM_GROUP
--------------------------------------------------------

  CREATE UNIQUE INDEX "SIC"."PK_ADM_GROUP" ON "SIC"."ADM_GROUP" ("GROUP_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index AK_ADM_GROUP_NAME
--------------------------------------------------------

  CREATE UNIQUE INDEX "SIC"."AK_ADM_GROUP_NAME" ON "SIC"."ADM_GROUP" ("GROUP_NAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_ADM_GROUP_RULE
--------------------------------------------------------

  CREATE UNIQUE INDEX "SIC"."PK_ADM_GROUP_RULE" ON "SIC"."ADM_GROUP_RULE" ("GROUP_ID", "ACCESS_RULE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index FK_ADMACCRUL_ADMGRPRUL
--------------------------------------------------------

  CREATE INDEX "SIC"."FK_ADMACCRUL_ADMGRPRUL" ON "SIC"."ADM_GROUP_RULE" ("ACCESS_RULE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index FK_ADMGRP_ADMGRPRUL
--------------------------------------------------------

  CREATE INDEX "SIC"."FK_ADMGRP_ADMGRPRUL" ON "SIC"."ADM_GROUP_RULE" ("GROUP_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_ADM_USER
--------------------------------------------------------

  CREATE UNIQUE INDEX "SIC"."PK_ADM_USER" ON "SIC"."ADM_USER" ("USER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index AK_ADM_LOGIN
--------------------------------------------------------

  CREATE UNIQUE INDEX "SIC"."AK_ADM_LOGIN" ON "SIC"."ADM_USER" ("LOGIN") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index FK_USRTYP_ADMUSR
--------------------------------------------------------

  CREATE INDEX "SIC"."FK_USRTYP_ADMUSR" ON "SIC"."ADM_USER" ("USER_TYPE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_ADM_USER_GROUP
--------------------------------------------------------

  CREATE UNIQUE INDEX "SIC"."PK_ADM_USER_GROUP" ON "SIC"."ADM_USER_GROUP" ("USER_ID", "GROUP_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index FK_ADMGRP_ADMUSRGRP
--------------------------------------------------------

  CREATE INDEX "SIC"."FK_ADMGRP_ADMUSRGRP" ON "SIC"."ADM_USER_GROUP" ("GROUP_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index FK_ADMUSR_ADMUSRGRP
--------------------------------------------------------

  CREATE INDEX "SIC"."FK_ADMUSR_ADMUSRGRP" ON "SIC"."ADM_USER_GROUP" ("USER_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_CORE_PARAMETER
--------------------------------------------------------

  CREATE UNIQUE INDEX "SIC"."PK_CORE_PARAMETER" ON "SIC"."CORE_PARAMETER" ("PARAMETER_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index FK_CORSYS_CORPAR
--------------------------------------------------------

  CREATE INDEX "SIC"."FK_CORSYS_CORPAR" ON "SIC"."CORE_PARAMETER" ("SUBSYSTEM_NUMBER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_CORE_SUBSYSTEM
--------------------------------------------------------

  CREATE UNIQUE INDEX "SIC"."PK_CORE_SUBSYSTEM" ON "SIC"."CORE_SUBSYSTEM" ("SUBSYSTEM_NUMBER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_DESC_DATATYPE
--------------------------------------------------------

  CREATE UNIQUE INDEX "SIC"."PK_DESC_DATATYPE" ON "SIC"."DESC_DATATYPE" ("DATATYPE_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_DESCRIPTOR_GROUP
--------------------------------------------------------

  CREATE UNIQUE INDEX "SIC"."PK_DESCRIPTOR_GROUP" ON "SIC"."DESCRIPTOR_GROUP" ("DESCRIPTOR_GROUP_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index FK_CORSYS_DSCGRP
--------------------------------------------------------

  CREATE INDEX "SIC"."FK_CORSYS_DSCGRP" ON "SIC"."DESCRIPTOR_GROUP" ("SUBSYSTEM_NUMBER") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_DESCRIPTOR_GROUP_ATTR
--------------------------------------------------------

  CREATE UNIQUE INDEX "SIC"."PK_DESCRIPTOR_GROUP_ATTR" ON "SIC"."DESCRIPTOR_GROUP_ATTR" ("DESCRIPTOR_GROUP_ATTR_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index FK1_DSCGRP_DSCGRPATR
--------------------------------------------------------

  CREATE INDEX "SIC"."FK1_DSCGRP_DSCGRPATR" ON "SIC"."DESCRIPTOR_GROUP_ATTR" ("DESCRIPTOR_GROUP_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index FK_DSCTYP_DSCGRPATR
--------------------------------------------------------

  CREATE INDEX "SIC"."FK_DSCTYP_DSCGRPATR" ON "SIC"."DESCRIPTOR_GROUP_ATTR" ("DATATYPE_CODE") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_DESCRIPTOR_VALUE
--------------------------------------------------------

  CREATE UNIQUE INDEX "SIC"."PK_DESCRIPTOR_VALUE" ON "SIC"."DESCRIPTOR_VALUE" ("DESCRIPTOR_VALUE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index FK_DSCGRP_DSCVAL
--------------------------------------------------------

  CREATE INDEX "SIC"."FK_DSCGRP_DSCVAL" ON "SIC"."DESCRIPTOR_VALUE" ("DESCRIPTOR_GROUP_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index FK_DSCVAL_DSCVAL
--------------------------------------------------------

  CREATE INDEX "SIC"."FK_DSCVAL_DSCVAL" ON "SIC"."DESCRIPTOR_VALUE" ("PARENT_VALUE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_DESCRIPTOR_VALUE_ATTR
--------------------------------------------------------

  CREATE UNIQUE INDEX "SIC"."PK_DESCRIPTOR_VALUE_ATTR" ON "SIC"."DESCRIPTOR_VALUE_ATTR" ("DESCRIPTOR_VALUE_ATTR_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index FK_DSCVAL_DSCVALATR
--------------------------------------------------------

  CREATE INDEX "SIC"."FK_DSCVAL_DSCVALATR" ON "SIC"."DESCRIPTOR_VALUE_ATTR" ("DESCRIPTOR_VALUE_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index FK_DSCGRPATR_DSCVALATR
--------------------------------------------------------

  CREATE INDEX "SIC"."FK_DSCGRPATR_DSCVALATR" ON "SIC"."DESCRIPTOR_VALUE_ATTR" ("DESCRIPTOR_GROUP_ATTR_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  Constraints for Table ADM_ACCESS_RULE
--------------------------------------------------------

  ALTER TABLE "SIC"."ADM_ACCESS_RULE" ADD CONSTRAINT "PK_ADM_ACCESS_RULE" PRIMARY KEY ("ACCESS_RULE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "SIC"."ADM_ACCESS_RULE" MODIFY ("ACCESS_RULE_ID" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."ADM_ACCESS_RULE" MODIFY ("SUBSYSTEM_NUMBER" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."ADM_ACCESS_RULE" MODIFY ("RULE_CODE" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."ADM_ACCESS_RULE" MODIFY ("RULE_NAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ADM_EMPLOYEE
--------------------------------------------------------

  ALTER TABLE "SIC"."ADM_EMPLOYEE" ADD CONSTRAINT "PK_ADM_EMPLOYEE" PRIMARY KEY ("EMPLOYEE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "SIC"."ADM_EMPLOYEE" MODIFY ("EMPLOYEE_ID" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."ADM_EMPLOYEE" MODIFY ("DEPARTMENT_ID" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."ADM_EMPLOYEE" MODIFY ("POSITION_ID" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."ADM_EMPLOYEE" MODIFY ("LAST_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."ADM_EMPLOYEE" MODIFY ("FIRST_NAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ADM_GROUP
--------------------------------------------------------

  ALTER TABLE "SIC"."ADM_GROUP" ADD CONSTRAINT "AK_ADM_GROUP_NAME" UNIQUE ("GROUP_NAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "SIC"."ADM_GROUP" ADD CONSTRAINT "PK_ADM_GROUP" PRIMARY KEY ("GROUP_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "SIC"."ADM_GROUP" MODIFY ("GROUP_ID" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."ADM_GROUP" MODIFY ("GROUP_NAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ADM_GROUP_RULE
--------------------------------------------------------

  ALTER TABLE "SIC"."ADM_GROUP_RULE" ADD CONSTRAINT "PK_ADM_GROUP_RULE" PRIMARY KEY ("GROUP_ID", "ACCESS_RULE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "SIC"."ADM_GROUP_RULE" MODIFY ("GROUP_ID" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."ADM_GROUP_RULE" MODIFY ("ACCESS_RULE_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ADM_USER
--------------------------------------------------------

  ALTER TABLE "SIC"."ADM_USER" ADD CONSTRAINT "AK_ADM_LOGIN" UNIQUE ("LOGIN")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "SIC"."ADM_USER" ADD CONSTRAINT "PK_ADM_USER" PRIMARY KEY ("USER_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "SIC"."ADM_USER" MODIFY ("USER_ID" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."ADM_USER" MODIFY ("USER_TYPE_ID" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."ADM_USER" MODIFY ("LOGIN" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."ADM_USER" MODIFY ("PASSWORD" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."ADM_USER" MODIFY ("IS_BLOCKED" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."ADM_USER" MODIFY ("DISPLAYED_NAME" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ADM_USER_GROUP
--------------------------------------------------------

  ALTER TABLE "SIC"."ADM_USER_GROUP" ADD CONSTRAINT "PK_ADM_USER_GROUP" PRIMARY KEY ("USER_ID", "GROUP_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "SIC"."ADM_USER_GROUP" MODIFY ("USER_ID" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."ADM_USER_GROUP" MODIFY ("GROUP_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CORE_PARAMETER
--------------------------------------------------------

  ALTER TABLE "SIC"."CORE_PARAMETER" ADD CONSTRAINT "PK_CORE_PARAMETER" PRIMARY KEY ("PARAMETER_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "SIC"."CORE_PARAMETER" MODIFY ("PARAMETER_CODE" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."CORE_PARAMETER" MODIFY ("SUBSYSTEM_NUMBER" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."CORE_PARAMETER" MODIFY ("PARAMETER_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."CORE_PARAMETER" MODIFY ("PARAMETER_VALUE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CORE_SUBSYSTEM
--------------------------------------------------------

  ALTER TABLE "SIC"."CORE_SUBSYSTEM" ADD CONSTRAINT "PK_CORE_SUBSYSTEM" PRIMARY KEY ("SUBSYSTEM_NUMBER")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "SIC"."CORE_SUBSYSTEM" MODIFY ("SUBSYSTEM_NUMBER" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."CORE_SUBSYSTEM" MODIFY ("SUBSYSTEM_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."CORE_SUBSYSTEM" MODIFY ("SUBSYSTEM_CODE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table DESC_DATATYPE
--------------------------------------------------------

  ALTER TABLE "SIC"."DESC_DATATYPE" ADD CONSTRAINT "PK_DESC_DATATYPE" PRIMARY KEY ("DATATYPE_CODE")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "SIC"."DESC_DATATYPE" MODIFY ("DATATYPE_CODE" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."DESC_DATATYPE" MODIFY ("TYPE_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."DESC_DATATYPE" MODIFY ("SORT_ORDER" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table DESCRIPTOR_GROUP
--------------------------------------------------------

  ALTER TABLE "SIC"."DESCRIPTOR_GROUP" ADD CONSTRAINT "PK_DESCRIPTOR_GROUP" PRIMARY KEY ("DESCRIPTOR_GROUP_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "SIC"."DESCRIPTOR_GROUP" MODIFY ("DESCRIPTOR_GROUP_ID" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."DESCRIPTOR_GROUP" MODIFY ("GROUP_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."DESCRIPTOR_GROUP" MODIFY ("SORT_ORDER" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."DESCRIPTOR_GROUP" MODIFY ("IS_SYSTEM" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."DESCRIPTOR_GROUP" MODIFY ("IS_HIERARCHICAL" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."DESCRIPTOR_GROUP" MODIFY ("SHORT_VALUE_SUPPORTED" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."DESCRIPTOR_GROUP" MODIFY ("ALPHABETIC_SORT" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table DESCRIPTOR_GROUP_ATTR
--------------------------------------------------------

  ALTER TABLE "SIC"."DESCRIPTOR_GROUP_ATTR" ADD CONSTRAINT "PK_DESCRIPTOR_GROUP_ATTR" PRIMARY KEY ("DESCRIPTOR_GROUP_ATTR_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "SIC"."DESCRIPTOR_GROUP_ATTR" MODIFY ("DESCRIPTOR_GROUP_ATTR_ID" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."DESCRIPTOR_GROUP_ATTR" MODIFY ("DESCRIPTOR_GROUP_ID" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."DESCRIPTOR_GROUP_ATTR" MODIFY ("DATATYPE_CODE" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."DESCRIPTOR_GROUP_ATTR" MODIFY ("ATTR_NAME" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."DESCRIPTOR_GROUP_ATTR" MODIFY ("ATTR_CODE" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."DESCRIPTOR_GROUP_ATTR" MODIFY ("SORT_ORDER" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."DESCRIPTOR_GROUP_ATTR" MODIFY ("IS_COLLECTION" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."DESCRIPTOR_GROUP_ATTR" MODIFY ("IS_REQUIRED" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table DESCRIPTOR_VALUE
--------------------------------------------------------

  ALTER TABLE "SIC"."DESCRIPTOR_VALUE" ADD CONSTRAINT "PK_DESCRIPTOR_VALUE" PRIMARY KEY ("DESCRIPTOR_VALUE_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "SIC"."DESCRIPTOR_VALUE" MODIFY ("DESCRIPTOR_VALUE_ID" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."DESCRIPTOR_VALUE" MODIFY ("DESCRIPTOR_GROUP_ID" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."DESCRIPTOR_VALUE" MODIFY ("FULL_VALUE" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."DESCRIPTOR_VALUE" MODIFY ("SORT_ORDER" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table DESCRIPTOR_VALUE_ATTR
--------------------------------------------------------

  ALTER TABLE "SIC"."DESCRIPTOR_VALUE_ATTR" ADD CONSTRAINT "PK_DESCRIPTOR_VALUE_ATTR" PRIMARY KEY ("DESCRIPTOR_VALUE_ATTR_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
 
  ALTER TABLE "SIC"."DESCRIPTOR_VALUE_ATTR" MODIFY ("DESCRIPTOR_VALUE_ATTR_ID" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."DESCRIPTOR_VALUE_ATTR" MODIFY ("DESCRIPTOR_VALUE_ID" NOT NULL ENABLE);
 
  ALTER TABLE "SIC"."DESCRIPTOR_VALUE_ATTR" MODIFY ("DESCRIPTOR_GROUP_ATTR_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Ref Constraints for Table ADM_ACCESS_RULE
--------------------------------------------------------

  ALTER TABLE "SIC"."ADM_ACCESS_RULE" ADD CONSTRAINT "FK_CORSYS_ADMACCRUL" FOREIGN KEY ("SUBSYSTEM_NUMBER")
	  REFERENCES "SIC"."CORE_SUBSYSTEM" ("SUBSYSTEM_NUMBER") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ADM_EMPLOYEE
--------------------------------------------------------

  ALTER TABLE "SIC"."ADM_EMPLOYEE" ADD CONSTRAINT "FK_ADMUSR_ADMEMP" FOREIGN KEY ("USER_ID")
	  REFERENCES "SIC"."ADM_USER" ("USER_ID") ON DELETE CASCADE ENABLE;
 
  ALTER TABLE "SIC"."ADM_EMPLOYEE" ADD CONSTRAINT "FK_EMPDEP_AMDEMP" FOREIGN KEY ("DEPARTMENT_ID")
	  REFERENCES "SIC"."DESCRIPTOR_VALUE" ("DESCRIPTOR_VALUE_ID") ENABLE;
 
  ALTER TABLE "SIC"."ADM_EMPLOYEE" ADD CONSTRAINT "FK_EMPPOS_ADMEMP" FOREIGN KEY ("POSITION_ID")
	  REFERENCES "SIC"."DESCRIPTOR_VALUE" ("DESCRIPTOR_VALUE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ADM_GROUP_RULE
--------------------------------------------------------

  ALTER TABLE "SIC"."ADM_GROUP_RULE" ADD CONSTRAINT "FK_ADMACCRUL_ADMGRPRUL" FOREIGN KEY ("ACCESS_RULE_ID")
	  REFERENCES "SIC"."ADM_ACCESS_RULE" ("ACCESS_RULE_ID") ENABLE;
 
  ALTER TABLE "SIC"."ADM_GROUP_RULE" ADD CONSTRAINT "FK_ADMGRP_ADMGRPRUL" FOREIGN KEY ("GROUP_ID")
	  REFERENCES "SIC"."ADM_GROUP" ("GROUP_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ADM_USER
--------------------------------------------------------

  ALTER TABLE "SIC"."ADM_USER" ADD CONSTRAINT "FK_USRTYP_ADMUSR" FOREIGN KEY ("USER_TYPE_ID")
	  REFERENCES "SIC"."DESCRIPTOR_VALUE" ("DESCRIPTOR_VALUE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ADM_USER_GROUP
--------------------------------------------------------

  ALTER TABLE "SIC"."ADM_USER_GROUP" ADD CONSTRAINT "FK_ADMGRP_ADMUSRGRP" FOREIGN KEY ("GROUP_ID")
	  REFERENCES "SIC"."ADM_GROUP" ("GROUP_ID") ENABLE;
 
  ALTER TABLE "SIC"."ADM_USER_GROUP" ADD CONSTRAINT "FK_ADMUSR_ADMUSRGRP" FOREIGN KEY ("USER_ID")
	  REFERENCES "SIC"."ADM_USER" ("USER_ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CORE_PARAMETER
--------------------------------------------------------

  ALTER TABLE "SIC"."CORE_PARAMETER" ADD CONSTRAINT "FK_CORSYS_CORPAR" FOREIGN KEY ("SUBSYSTEM_NUMBER")
	  REFERENCES "SIC"."CORE_SUBSYSTEM" ("SUBSYSTEM_NUMBER") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table DESCRIPTOR_GROUP
--------------------------------------------------------

  ALTER TABLE "SIC"."DESCRIPTOR_GROUP" ADD CONSTRAINT "FK_CORSYS_DSCGRP" FOREIGN KEY ("SUBSYSTEM_NUMBER")
	  REFERENCES "SIC"."CORE_SUBSYSTEM" ("SUBSYSTEM_NUMBER") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table DESCRIPTOR_GROUP_ATTR
--------------------------------------------------------

  ALTER TABLE "SIC"."DESCRIPTOR_GROUP_ATTR" ADD CONSTRAINT "FK1_DSCGRP_DSCGRPATR" FOREIGN KEY ("DESCRIPTOR_GROUP_ID")
	  REFERENCES "SIC"."DESCRIPTOR_GROUP" ("DESCRIPTOR_GROUP_ID") ENABLE;
 
  ALTER TABLE "SIC"."DESCRIPTOR_GROUP_ATTR" ADD CONSTRAINT "FK2_DSCGRP_DSCGRPATR" FOREIGN KEY ("REF_DESCRIPTOR_GROUP_ID")
	  REFERENCES "SIC"."DESCRIPTOR_GROUP" ("DESCRIPTOR_GROUP_ID") ENABLE;
 
  ALTER TABLE "SIC"."DESCRIPTOR_GROUP_ATTR" ADD CONSTRAINT "FK_DSCTYP_DSCGRPATR" FOREIGN KEY ("DATATYPE_CODE")
	  REFERENCES "SIC"."DESC_DATATYPE" ("DATATYPE_CODE") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table DESCRIPTOR_VALUE
--------------------------------------------------------

  ALTER TABLE "SIC"."DESCRIPTOR_VALUE" ADD CONSTRAINT "FK_DSCGRP_DSCVAL" FOREIGN KEY ("DESCRIPTOR_GROUP_ID")
	  REFERENCES "SIC"."DESCRIPTOR_GROUP" ("DESCRIPTOR_GROUP_ID") ENABLE;
 
  ALTER TABLE "SIC"."DESCRIPTOR_VALUE" ADD CONSTRAINT "FK_DSCVAL_DSCVAL" FOREIGN KEY ("PARENT_VALUE_ID")
	  REFERENCES "SIC"."DESCRIPTOR_VALUE" ("DESCRIPTOR_VALUE_ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table DESCRIPTOR_VALUE_ATTR
--------------------------------------------------------

  ALTER TABLE "SIC"."DESCRIPTOR_VALUE_ATTR" ADD CONSTRAINT "FK_DSCGRPATR_DSCVALATR" FOREIGN KEY ("DESCRIPTOR_GROUP_ATTR_ID")
	  REFERENCES "SIC"."DESCRIPTOR_GROUP_ATTR" ("DESCRIPTOR_GROUP_ATTR_ID") ENABLE;
 
  ALTER TABLE "SIC"."DESCRIPTOR_VALUE_ATTR" ADD CONSTRAINT "FK_DSCVAL_DSCVALATR" FOREIGN KEY ("DESCRIPTOR_VALUE_ID")
	  REFERENCES "SIC"."DESCRIPTOR_VALUE" ("DESCRIPTOR_VALUE_ID") ON DELETE CASCADE ENABLE;
 
  ALTER TABLE "SIC"."DESCRIPTOR_VALUE_ATTR" ADD CONSTRAINT "FK_REFDSCVAL_DSCVALATR" FOREIGN KEY ("REF_DESCRIPTOR_VALUE_ID")
	  REFERENCES "SIC"."DESCRIPTOR_VALUE" ("DESCRIPTOR_VALUE_ID") ENABLE;
--------------------------------------------------------
--  DDL for Trigger TBI_ADM_ACCESS_RULE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "SIC"."TBI_ADM_ACCESS_RULE" 
 BEFORE 
 INSERT
 ON ADM_ACCESS_RULE
 REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
begin
  if :NEW.ACCESS_RULE_ID  is null then
    select SEQ_ADM_ACCESS_RULE.NEXTVAL into :NEW.ACCESS_RULE_ID from dual;
  end if;
end;

/
ALTER TRIGGER "SIC"."TBI_ADM_ACCESS_RULE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TBI_ADM_GROUP
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "SIC"."TBI_ADM_GROUP" 
 BEFORE 
 INSERT
 ON ADM_GROUP
 REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
begin
  if :NEW.GROUP_ID  is null then
    select SEQ_ADM_GROUP.NEXTVAL into :NEW.GROUP_ID from dual;
  end if;
end;

/
ALTER TRIGGER "SIC"."TBI_ADM_GROUP" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TBI_DESCRIPTOR_GROUP
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "SIC"."TBI_DESCRIPTOR_GROUP" 
 BEFORE 
 INSERT
 ON DESCRIPTOR_GROUP
 REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
begin
  if :NEW.DESCRIPTOR_GROUP_ID  is null then
    select SEQ_DESCRIPTOR_GROUP.NEXTVAL into :NEW.DESCRIPTOR_GROUP_ID from dual;
  end if;
end;

/
ALTER TRIGGER "SIC"."TBI_DESCRIPTOR_GROUP" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TBI_DESCRIPTOR_GROUP_ATTR
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "SIC"."TBI_DESCRIPTOR_GROUP_ATTR" 
 BEFORE 
 INSERT
 ON DESCRIPTOR_GROUP_ATTR
 REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
begin
  if :NEW.DESCRIPTOR_GROUP_ATTR_ID is null then
    select SEQ_DESCRIPTOR_GROUP_ATTR.NEXTVAL into :NEW.DESCRIPTOR_GROUP_ATTR_ID from dual;
  end if;
end;

/
ALTER TRIGGER "SIC"."TBI_DESCRIPTOR_GROUP_ATTR" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TBI_DESCRIPTOR_VALUE
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "SIC"."TBI_DESCRIPTOR_VALUE" 
 BEFORE 
 INSERT
 ON DESCRIPTOR_VALUE
 REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
begin
  if :NEW.DESCRIPTOR_VALUE_ID  is null then
    select SEQ_DESCRIPTOR_VALUE.NEXTVAL into :NEW.DESCRIPTOR_VALUE_ID from dual;
  end if;
end;

/
ALTER TRIGGER "SIC"."TBI_DESCRIPTOR_VALUE" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TBI_DESCRIPTOR_VALUE_ATTR
--------------------------------------------------------

  CREATE OR REPLACE TRIGGER "SIC"."TBI_DESCRIPTOR_VALUE_ATTR" 
 BEFORE 
 INSERT
 ON DESCRIPTOR_VALUE_ATTR
 REFERENCING OLD AS OLD NEW AS NEW
 FOR EACH ROW
begin
  if :NEW.DESCRIPTOR_VALUE_ATTR_ID is null then
    select SEQ_DESCRIPTOR_VALUE_ATTR.NEXTVAL into :NEW.DESCRIPTOR_VALUE_ATTR_ID from dual;
  end if;
end;

/
ALTER TRIGGER "SIC"."TBI_DESCRIPTOR_VALUE_ATTR" ENABLE;
--------------------------------------------------------
--  DDL for Function MD5
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "SIC"."MD5" (str varchar2) return raw as
begin
return dbms_crypto.hash(utl_raw.cast_to_raw(str),dbms_crypto.hash_md5);
end;
 

/
--------------------------------------------------------
--  DDL for Function QQ_GET_CONTACT
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "SIC"."QQ_GET_CONTACT" 
(
  ADDRESS IN VARCHAR2
, PHONE IN VARCHAR2
) RETURN VARCHAR2 IS
  RESULT VARCHAR2(255);
BEGIN
  RESULT := NULL;
  if ADDRESS IS NOT NULL THEN
    RESULT := ADDRESS;
  ELSIF PHONE IS NOT NULL  THEN
    RESULT := PHONE;
  end if;
  if LENGTH(RESULT) is NOT NULL THEN
    if RESULT like ADDRESS and PHONE IS NOT NULL THEN
      RESULT := CONCAT(RESULT, CONCAT(', тел. ', PHONE));
    elsif RESULT like PHONE THEN
      RESULT := CONCAT('тел. ', PHONE);
    end if;
  else
     RESULT := ' ';
  end if;

  return RESULT;
END QQ_GET_CONTACT;

/
--------------------------------------------------------
--  DDL for Function QQ_ON_INTERVAL_EXEC_COUNT
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "SIC"."QQ_ON_INTERVAL_EXEC_COUNT" 
(
  REQ_TYPE IN VARCHAR2
, EXEC_ORG IN VARCHAR2
, BEG_DATE IN DATE
, END_DATE IN DATE
) RETURN VARCHAR2 AS
  RESULT VARCHAR2(20);

BEGIN
  if EXEC_ORG is NULL then
    if REQ_TYPE is NULL then
      select count(*) into RESULT from QQ_QUESTION
      where STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    else
      select count(*) into RESULT from QQ_QUESTION
      where QUESTION_TYPE_ID = QQ_VALUE_ID_BY_CODE(REQ_TYPE)
      and STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    end if;
  elsif EXEC_ORG = '-1' then
    if REQ_TYPE is NULL then
      select count(*) into RESULT from QQ_QUESTION
      where STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and EXEC_ORG_ID != QQ_VALUE_ID_BY_CODE('Q_VALUE_MEMBER_SIC')
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    else
      select count(*) into RESULT from QQ_QUESTION
      where QUESTION_TYPE_ID = QQ_VALUE_ID_BY_CODE(REQ_TYPE)
      and STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and EXEC_ORG_ID != QQ_VALUE_ID_BY_CODE('Q_VALUE_MEMBER_SIC')
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    end if;
  else
    if REQ_TYPE is NULL then
      select count(*) into RESULT from QQ_QUESTION
      where STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and EXEC_ORG_ID = QQ_VALUE_ID_BY_CODE(EXEC_ORG)
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    else
      select count(*) into RESULT from QQ_QUESTION
      where QUESTION_TYPE_ID = QQ_VALUE_ID_BY_CODE(REQ_TYPE)
      and STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and EXEC_ORG_ID = QQ_VALUE_ID_BY_CODE(EXEC_ORG)
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    end if;
  end if;
  if RESULT = 0 then
    return ' ';
  else
    return CONCAT('', RESULT);
  end if;
END QQ_ON_INTERVAL_EXEC_COUNT;

/
--------------------------------------------------------
--  DDL for Function QQ_ON_INTERVAL_EXEC_NEG
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "SIC"."QQ_ON_INTERVAL_EXEC_NEG" 
(
  REQ_TYPE IN VARCHAR2
, EXEC_ORG IN VARCHAR2
, BEG_DATE IN DATE
, END_DATE IN DATE
) RETURN VARCHAR2 AS
  RESULT VARCHAR2(20);

BEGIN
  if EXEC_ORG is NULL then
    if REQ_TYPE is NULL then
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and ANSWER_RESULT_ID in (QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_MINUS_PAID'),
        QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_MINUS_NEPROF'), QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_MINUS_WVIEW'))
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    else
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where QUESTION_TYPE_ID = QQ_VALUE_ID_BY_CODE(REQ_TYPE)
      and STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and ANSWER_RESULT_ID in (QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_MINUS_PAID'),
        QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_MINUS_NEPROF'), QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_MINUS_WVIEW'))
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    end if;
  elsif EXEC_ORG = '-1' then
      if REQ_TYPE is NULL then
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and ANSWER_RESULT_ID in (QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_MINUS_PAID'),
        QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_MINUS_NEPROF'), QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_MINUS_WVIEW'))
      and EXEC_ORG_ID != QQ_VALUE_ID_BY_CODE('Q_VALUE_MEMBER_SIC')
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    else
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where QUESTION_TYPE_ID = QQ_VALUE_ID_BY_CODE(REQ_TYPE)
      and STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and ANSWER_RESULT_ID in (QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_MINUS_PAID'),
        QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_MINUS_NEPROF'), QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_MINUS_WVIEW'))
      and EXEC_ORG_ID != QQ_VALUE_ID_BY_CODE('Q_VALUE_MEMBER_SIC')
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    end if;
  else
      if REQ_TYPE is NULL then
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and ANSWER_RESULT_ID in (QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_MINUS_PAID'),
        QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_MINUS_NEPROF'), QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_MINUS_WVIEW'))
      and EXEC_ORG_ID = QQ_VALUE_ID_BY_CODE(EXEC_ORG)
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    else
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where QUESTION_TYPE_ID = QQ_VALUE_ID_BY_CODE(REQ_TYPE)
      and STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and ANSWER_RESULT_ID in (QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_MINUS_PAID'),
        QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_MINUS_NEPROF'), QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_MINUS_WVIEW'))
      and EXEC_ORG_ID = QQ_VALUE_ID_BY_CODE(EXEC_ORG)
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    end if;
  end if;
  if RESULT = 0 then
    return ' ';
  else
    return CONCAT('', RESULT);
  end if;
END QQ_ON_INTERVAL_EXEC_NEG;

/
--------------------------------------------------------
--  DDL for Function QQ_ON_INTERVAL_EXEC_POS
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "SIC"."QQ_ON_INTERVAL_EXEC_POS" 
(
  REQ_TYPE IN VARCHAR2
, EXEC_ORG IN VARCHAR2
, BEG_DATE IN DATE
, END_DATE IN DATE
) RETURN VARCHAR2 AS
  RESULT VARCHAR2(20);

BEGIN
  if EXEC_ORG is NULL then
    if REQ_TYPE is NULL then
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and ANSWER_RESULT_ID in (QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_PLUS'),
        QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_PLUS_PAID'))
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    else
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where QUESTION_TYPE_ID = QQ_VALUE_ID_BY_CODE(REQ_TYPE)
      and STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and ANSWER_RESULT_ID in (QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_PLUS'),
        QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_PLUS_PAID'))
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    end if;
  elsif EXEC_ORG = '-1' then
    if REQ_TYPE is NULL then
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and ANSWER_RESULT_ID in (QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_PLUS'),
        QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_PLUS_PAID'))
      and EXEC_ORG_ID != QQ_VALUE_ID_BY_CODE('Q_VALUE_MEMBER_SIC')
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    else
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where QUESTION_TYPE_ID = QQ_VALUE_ID_BY_CODE(REQ_TYPE)
      and STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and ANSWER_RESULT_ID in (QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_PLUS'),
        QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_PLUS_PAID'))
      and EXEC_ORG_ID != QQ_VALUE_ID_BY_CODE('Q_VALUE_MEMBER_SIC')
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    end if;
  else
    if REQ_TYPE is NULL then
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and ANSWER_RESULT_ID in (QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_PLUS'),
        QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_PLUS_PAID'))
      and EXEC_ORG_ID = QQ_VALUE_ID_BY_CODE(EXEC_ORG)
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    else
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where QUESTION_TYPE_ID = QQ_VALUE_ID_BY_CODE(REQ_TYPE)
      and STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and ANSWER_RESULT_ID in (QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_PLUS'),
        QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_PLUS_PAID'))
      and EXEC_ORG_ID = QQ_VALUE_ID_BY_CODE(EXEC_ORG)
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    end if;
  end if;
  if RESULT = 0 then
    return ' ';
  else
    return CONCAT('', RESULT);
  end if;
END QQ_ON_INTERVAL_EXEC_POS;

/
--------------------------------------------------------
--  DDL for Function QQ_ON_INTERVAL_EXEC_REC
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "SIC"."QQ_ON_INTERVAL_EXEC_REC" 
(
  REQ_TYPE IN VARCHAR2
, EXEC_ORG IN VARCHAR2
, BEG_DATE IN DATE
, END_DATE IN DATE
) RETURN VARCHAR2 AS
  RESULT VARCHAR2(20);

BEGIN
  if EXEC_ORG is NULL then
    if REQ_TYPE is NULL then
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and ANSWER_RESULT_ID in (QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_REDIRECT'),
        QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_DOP_INFO'))
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    else
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where QUESTION_TYPE_ID = QQ_VALUE_ID_BY_CODE(REQ_TYPE)
      and STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and ANSWER_RESULT_ID in (QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_REDIRECT'),
       QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_DOP_INFO'))
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    end if;
  elsif EXEC_ORG = '-1' then
    if REQ_TYPE is NULL then
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and ANSWER_RESULT_ID in (QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_REDIRECT'),
        QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_DOP_INFO'))
      and EXEC_ORG_ID != QQ_VALUE_ID_BY_CODE('Q_VALUE_MEMBER_SIC')
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    else
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where QUESTION_TYPE_ID = QQ_VALUE_ID_BY_CODE(REQ_TYPE)
      and STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and ANSWER_RESULT_ID in (QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_REDIRECT'),
       QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_DOP_INFO'))
      and EXEC_ORG_ID != QQ_VALUE_ID_BY_CODE('Q_VALUE_MEMBER_SIC')
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    end if;
  else
    if REQ_TYPE is NULL then
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and ANSWER_RESULT_ID in (QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_REDIRECT'),
        QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_DOP_INFO'))
      and EXEC_ORG_ID = QQ_VALUE_ID_BY_CODE(EXEC_ORG)
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    else
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where QUESTION_TYPE_ID = QQ_VALUE_ID_BY_CODE(REQ_TYPE)
      and STATUS_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_QSTAT_EXEC')
      and ANSWER_RESULT_ID in (QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_REDIRECT'),
       QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_DOP_INFO'))
      and EXEC_ORG_ID = QQ_VALUE_ID_BY_CODE(EXEC_ORG)
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    end if;
  end if;
  if RESULT = 0 then
    return ' ';
  else
    return CONCAT('', RESULT);
  end if;
END QQ_ON_INTERVAL_EXEC_REC;

/
--------------------------------------------------------
--  DDL for Function QQ_ON_INTERVAL_QUERY_COUNT
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "SIC"."QQ_ON_INTERVAL_QUERY_COUNT" 
(
  REQ_TYPE IN VARCHAR2
, EXEC_ORG IN VARCHAR2
, BEG_DATE IN DATE
, END_DATE IN DATE
) RETURN VARCHAR2 AS
  RESULT VARCHAR2(20);


BEGIN

  if EXEC_ORG is NULL then
    if REQ_TYPE is NULL then
     select count(*) into RESULT from QQ_QUESTION
     where REG_DATE BETWEEN BEG_DATE and END_DATE;
    else
      select count(*) into RESULT from QQ_QUESTION
      where QUESTION_TYPE_ID = QQ_VALUE_ID_BY_CODE(REQ_TYPE)
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    end if;
  elsif EXEC_ORG = '-1' then
    if REQ_TYPE is NULL then
     select count(*) into RESULT from QQ_QUESTION
     where EXEC_ORG_ID != QQ_VALUE_ID_BY_CODE('Q_VALUE_MEMBER_SIC')
     and REG_DATE BETWEEN BEG_DATE and END_DATE;
    else
      select count(*) into RESULT from QQ_QUESTION
      where QUESTION_TYPE_ID = QQ_VALUE_ID_BY_CODE(REQ_TYPE)
      and EXEC_ORG_ID != QQ_VALUE_ID_BY_CODE('Q_VALUE_MEMBER_SIC')
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    end if;
  else
    if REQ_TYPE is NULL then
     select count(*) into RESULT from QQ_QUESTION
     where EXEC_ORG_ID = QQ_VALUE_ID_BY_CODE(EXEC_ORG)
     and REG_DATE BETWEEN BEG_DATE and END_DATE;
    else
      select count(*) into RESULT from QQ_QUESTION
      where QUESTION_TYPE_ID = QQ_VALUE_ID_BY_CODE(REQ_TYPE)
      and EXEC_ORG_ID = QQ_VALUE_ID_BY_CODE(EXEC_ORG)
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    end if;
  end if;
  if RESULT = 0 then
    return ' ';
  else
    return CONCAT('', RESULT);
  end if;
END QQ_ON_INTERVAL_QUERY_COUNT;

/
--------------------------------------------------------
--  DDL for Function QQ_ON_INTERVAL_REFUS_COUNT
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "SIC"."QQ_ON_INTERVAL_REFUS_COUNT" 
(
  REQ_TYPE IN VARCHAR2
, EXEC_ORG IN VARCHAR2
, BEG_DATE IN DATE
, END_DATE IN DATE
) RETURN VARCHAR2 AS
  RESULT VARCHAR2(20);

BEGIN
  if EXEC_ORG is NULL then
    if REQ_TYPE is NULL then
      select count(*) into RESULT from QQ_QUESTION
      where MOTIVATED_REFUSAL = 1
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    else
      select count(*) into RESULT from QQ_QUESTION
      where QUESTION_TYPE_ID = QQ_VALUE_ID_BY_CODE(REQ_TYPE)
      and MOTIVATED_REFUSAL = 1
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    end if;
  elsif EXEC_ORG = '-1' then
    if REQ_TYPE is NULL then
      select count(*) into RESULT from QQ_QUESTION
      where MOTIVATED_REFUSAL = 1
      and EXEC_ORG_ID != QQ_VALUE_ID_BY_CODE('Q_VALUE_MEMBER_SIC')
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    else
      select count(*) into RESULT from QQ_QUESTION
      where QUESTION_TYPE_ID = QQ_VALUE_ID_BY_CODE(REQ_TYPE)
      and MOTIVATED_REFUSAL = 1
      and EXEC_ORG_ID != QQ_VALUE_ID_BY_CODE('Q_VALUE_MEMBER_SIC')
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    end if;
  else
      if REQ_TYPE is NULL then
      select count(*) into RESULT from QQ_QUESTION
      where MOTIVATED_REFUSAL = 1
      and EXEC_ORG_ID = QQ_VALUE_ID_BY_CODE(EXEC_ORG)
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    else
      select count(*) into RESULT from QQ_QUESTION
      where QUESTION_TYPE_ID = QQ_VALUE_ID_BY_CODE(REQ_TYPE)
      and MOTIVATED_REFUSAL = 1
      and EXEC_ORG_ID = QQ_VALUE_ID_BY_CODE(EXEC_ORG)
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    end if;
  end if;
  if RESULT = 0 then
    return ' ';
  else
    return CONCAT('', RESULT);
  end if;
END QQ_ON_INTERVAL_REFUS_COUNT;

/
--------------------------------------------------------
--  DDL for Function QQ_ON_INTERVAL_REJECT_COUNT
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "SIC"."QQ_ON_INTERVAL_REJECT_COUNT" 
(
  REQ_TYPE IN VARCHAR2
, EXEC_ORG IN VARCHAR2
, BEG_DATE IN DATE
, END_DATE IN DATE
) RETURN VARCHAR2 AS
  RESULT VARCHAR2(20);

BEGIN
  if EXEC_ORG is NULL then
    if REQ_TYPE is NULL then
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where ANSWER_RESULT_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_REJECTED')
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    else
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where QUESTION_TYPE_ID = QQ_VALUE_ID_BY_CODE(REQ_TYPE)
      and ANSWER_RESULT_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_REJECTED')
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    end if;
  elsif EXEC_ORG = '-1' then
    if REQ_TYPE is NULL then
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where ANSWER_RESULT_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_REJECTED')
      and EXEC_ORG_ID != QQ_VALUE_ID_BY_CODE('Q_VALUE_MEMBER_SIC')
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    else
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where QUESTION_TYPE_ID = QQ_VALUE_ID_BY_CODE(REQ_TYPE)
      and ANSWER_RESULT_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_REJECTED')
      and EXEC_ORG_ID != QQ_VALUE_ID_BY_CODE('Q_VALUE_MEMBER_SIC')
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    end if;
  else
      if REQ_TYPE is NULL then
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where ANSWER_RESULT_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_REJECTED')
      and EXEC_ORG_ID = QQ_VALUE_ID_BY_CODE(EXEC_ORG)
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    else
      select count(*) into RESULT from QQ_QUESTION LEFT JOIN QQ_EXECUTION
      on QQ_QUESTION.QUESTION_ID = QQ_EXECUTION.QUESTION_ID
      where QUESTION_TYPE_ID = QQ_VALUE_ID_BY_CODE(REQ_TYPE)
      and ANSWER_RESULT_ID = QQ_VALUE_ID_BY_CODE('Q_VALUE_RESULT_REJECTED')
      and EXEC_ORG_ID = QQ_VALUE_ID_BY_CODE(EXEC_ORG)
      and REG_DATE BETWEEN BEG_DATE and END_DATE;
    end if;
  end if;
  if RESULT = 0 then
    return ' ';
  else
    return CONCAT('', RESULT);
  end if;
END QQ_ON_INTERVAL_REJECT_COUNT;

/
--------------------------------------------------------
--  DDL for Function QQ_VALUE_ID_BY_CODE
--------------------------------------------------------

  CREATE OR REPLACE FUNCTION "SIC"."QQ_VALUE_ID_BY_CODE" 
(
  CODE IN VARCHAR2
) RETURN NUMBER AS
  RESULT NUMBER(19);
BEGIN
  select DESCRIPTOR_VALUE_ID into RESULT from DESCRIPTOR_VALUE WHERE VALUE_CODE = CODE;

  RETURN RESULT;
END QQ_VALUE_ID_BY_CODE;

/
--------------------------------------------------------
--  DDL for Package DESCRIPTOR_PACK
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "SIC"."DESCRIPTOR_PACK" 
  IS

    --Увеличивает SORT_ORDER всех пользовательских указателей
    --или справочников внутри подсистемы
    --если происходит вставка нового справочника в середину
    --Должна быть вызвана перед операцией INSERT нового справочника
    procedure GRP_ORDER_INCREASE(
        p_group_id  in  DESCRIPTOR_GROUP.DESCRIPTOR_GROUP_ID%TYPE);

    --Создаёт или удаляет необходимую денормализацию значений справочника
    --при установке или снятии свойств (иерархичность, сокращённые значения)
    --Вызывается перед обновлением данных справочника (UPDATE)
    procedure GRP_SET_PROPERTIES(
        p_group_id          in  DESCRIPTOR_GROUP.DESCRIPTOR_GROUP_ID%TYPE,
        p_new_hierarch      in  DESCRIPTOR_GROUP.IS_HIERARCHICAL%TYPE,
        p_new_short_values  in  DESCRIPTOR_GROUP.SHORT_VALUE_SUPPORTED%TYPE);

    --Удаляет справочник со всеми значениями и атрибутами
    --Если на справочник или его значения есть внешние ссылки
    --выдаёт исключение
    procedure REMOVE_GROUP(
        p_group_id  in  DESCRIPTOR_GROUP.DESCRIPTOR_GROUP_ID%TYPE);

    --Уменьшает SORT_ORDER всех атрибутов справочника
    --если атрибут удаляется
    --Должна быть вызвана перед операцией DELETE атрибута
    procedure ATTR_ORDER_DECREASE(
        p_attr_id   in  DESCRIPTOR_GROUP_ATTR.DESCRIPTOR_GROUP_ATTR_ID%TYPE);

    --Удаляет атрибут, даже если к нему привязаны значения справочника
    --Вызывается, когда пользователь подтверждает удаление атрибута
    procedure FORCE_REMOVE_ATTR(
        p_attr_id   in  DESCRIPTOR_GROUP_ATTR.DESCRIPTOR_GROUP_ATTR_ID%TYPE);

    --Уменьшает SORT_ORDER всех значений справочника с учётом иерархии
    --если значение привязывается к другому узлу или удаляется
    --Должна быть вызвана перед операцией DELETE или UPDATE PARENT_VALUE_ID значения
    procedure VAL_ORDER_DECREASE(
        p_value_id  in  DESCRIPTOR_VALUE.DESCRIPTOR_VALUE_ID%TYPE);

    --Возвращает chr(1), если переданное строковое значение "больше", чем заданный порог
    --Используется при сортировке
    function SORT_BY_PATH(
        p_value     in  varchar2,
        p_threshold in  varchar2)
    return varchar2;

    --Возвращает 0, если переданное значение больше, чем заданный порог
    --Используется при сортировке
    function SORT_BY_ROWNUM(
        p_value     in  number,
        p_threshold in  number)
    return number;

    --Возвращает ID значения справочника по коду справочника и коду значения
    function GET_VALUE_ID_BY_CODE(
        p_group_code    in  DESCRIPTOR_GROUP.GROUP_CODE%TYPE,
        p_value_code    in  DESCRIPTOR_VALUE.VALUE_CODE%TYPE)
    return DESCRIPTOR_VALUE.DESCRIPTOR_VALUE_ID%TYPE;

    --Определяет тип элемента организационной структуры, возвращает код
    function GET_ORG_STRUCTURE_TYPE(
        p_value_id  in  DESCRIPTOR_VALUE.DESCRIPTOR_VALUE_ID%TYPE)
    return DESCRIPTOR_VALUE.VALUE_CODE%TYPE;

    --Возвращает путь по иерархии из полных значений
    function GET_FULL_PATH(
        p_value_id  in  DESCRIPTOR_VALUE.DESCRIPTOR_VALUE_ID%TYPE)
    return varchar2;

    --Возвращает путь по иерархии из сокращённых значений
    function GET_SHORT_PATH(
        p_value_id  in  DESCRIPTOR_VALUE.DESCRIPTOR_VALUE_ID%TYPE)
    return varchar2;

    --Возвращает путь по иерархии из идентификаторов
    function GET_ID_PATH(
        p_value_id  in  DESCRIPTOR_VALUE.DESCRIPTOR_VALUE_ID%TYPE)
    return varchar2;

    --Возвращает сквозной порядковый номер в иерархии (сортировка по полным значениям)
    function GET_FULL_PATH_ROWNUM(
        p_value_id  in  DESCRIPTOR_VALUE.DESCRIPTOR_VALUE_ID%TYPE)
    return number;

    --Возвращает сквозной порядковый номер в иерархии (сортировка по сокращённым значениям)
    function GET_SHORT_PATH_ROWNUM(
        p_value_id  in  DESCRIPTOR_VALUE.DESCRIPTOR_VALUE_ID%TYPE)
    return number;

    --Возвращает сквозной порядковый номер в иерархии (сортировка по порядковому номеру)
    function GET_ORDER_ROWNUM(
        p_value_id  in  DESCRIPTOR_VALUE.DESCRIPTOR_VALUE_ID%TYPE)
    return number;

END; -- DESCRIPTOR_PACK
 
 

/
--------------------------------------------------------
--  DDL for Package STORAGE_PACK
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "SIC"."STORAGE_PACK" 
  IS

   procedure INDEX_ORG_NAMES(
       p_rowid     in      ROWID,
       o_result    in out  CLOB);

   function GET_FUND_FULL_NUMBER(
       p_num       in  STRG_FUND.FUND_NUM%TYPE,
       p_prefix    in  STRG_FUND.PREFIX%TYPE,
       p_suffix    in  STRG_FUND.SUFFIX%TYPE)
   return varchar2;

   function GET_ORG_STORAGE_YEARS(
       p_org_id    in  STRG_ORGANIZATION.ORGANIZATION_ID%TYPE)
   return varchar2;

END; -- Package spec
 

/
--------------------------------------------------------
--  DDL for Package UPIZ_PACK
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "SIC"."UPIZ_PACK" 
IS
    FUNCTION get_arch_number (p_rr_zakaz_id IN rr_zakaz.irr_zakazid%TYPE)
        RETURN VARCHAR2;

    FUNCTION get_person_short_fio (p_personid IN NUMBER)
        RETURN VARCHAR2;
END;
 

/
--------------------------------------------------------
--  DDL for Package Body DESCRIPTOR_PACK
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "SIC"."DESCRIPTOR_PACK" 
IS

    --Увеличивает SORT_ORDER всех пользовательских указателей
    --или справочников внутри подсистемы
    --если происходит вставка нового справочника в середину
    --Должна быть вызвана перед операцией INSERT нового справочника
    procedure GRP_ORDER_INCREASE(
        p_group_id  in  DESCRIPTOR_GROUP.DESCRIPTOR_GROUP_ID%TYPE)
    is
      v_subsystem CORE_SUBSYSTEM.SUBSYSTEM_NUMBER%TYPE;
      v_order     DESCRIPTOR_GROUP.SORT_ORDER%TYPE;
    begin
      select SUBSYSTEM_NUMBER, SORT_ORDER
        into v_subsystem, v_order
        from DESCRIPTOR_GROUP
       where DESCRIPTOR_GROUP_ID = p_group_id;

      update DESCRIPTOR_GROUP
         set SORT_ORDER = SORT_ORDER + 1
       where nvl(SUBSYSTEM_NUMBER, -1) = nvl(v_subsystem, -1)
         and SORT_ORDER               >= v_order
         and DESCRIPTOR_GROUP_ID      != p_group_id;

    end;


    --Создаёт или удаляет необходимую денормализацию значений справочника
    --при установке или снятии свойств (иерархичность, сокращённые значения)
    --Вызывается перед обновлением данных справочника (UPDATE)
    procedure GRP_SET_PROPERTIES(
        p_group_id          in  DESCRIPTOR_GROUP.DESCRIPTOR_GROUP_ID%TYPE,
        p_new_hierarch      in  DESCRIPTOR_GROUP.IS_HIERARCHICAL%TYPE,
        p_new_short_values  in  DESCRIPTOR_GROUP.SHORT_VALUE_SUPPORTED%TYPE)
    is
      v_old_hierarch        DESCRIPTOR_GROUP.IS_HIERARCHICAL%TYPE;
      v_old_short_values    DESCRIPTOR_GROUP.SHORT_VALUE_SUPPORTED%TYPE;
    begin
      select IS_HIERARCHICAL, SHORT_VALUE_SUPPORTED
        into v_old_hierarch, v_old_short_values
        from DESCRIPTOR_GROUP
       where DESCRIPTOR_GROUP_ID = p_group_id;

      if p_new_hierarch != v_old_hierarch and p_new_hierarch = 0 then
        for R in (select rownum as ROW_NUM, DESCRIPTOR_VALUE_ID
                    from DESCRIPTOR_VALUE
                 connect by prior DESCRIPTOR_VALUE_ID = PARENT_VALUE_ID
                   start with PARENT_VALUE_ID is null
                          and DESCRIPTOR_GROUP_ID = p_group_id
                   order siblings by SORT_ORDER)
        loop
          update DESCRIPTOR_VALUE DV
             set DV.PARENT_VALUE_ID = null,
                 DV.SORT_ORDER      = R.ROW_NUM
           where DV.DESCRIPTOR_VALUE_ID = R.DESCRIPTOR_VALUE_ID;
        end loop;
      end if;
      if p_new_short_values != v_old_short_values then
        update DESCRIPTOR_VALUE
           set SHORT_VALUE = case p_new_short_values
                               when 0 then null
                               when 1 then FULL_VALUE
                             end
         where DESCRIPTOR_GROUP_ID = p_group_id;
      end if;
    end;


    --Удаляет справочник со всеми значениями и атрибутами
    --Если на справочник или его значения есть внешние ссылки
    --выдаёт исключение
    procedure REMOVE_GROUP(
        p_group_id  in  DESCRIPTOR_GROUP.DESCRIPTOR_GROUP_ID%TYPE)
    is
    begin
      delete from DESCRIPTOR_VALUE_ATTR
       where DESCRIPTOR_VALUE_ID in (select DESCRIPTOR_VALUE_ID
                                       from DESCRIPTOR_VALUE
                                      where DESCRIPTOR_GROUP_ID = p_group_id);
      delete from DESCRIPTOR_VALUE
       where DESCRIPTOR_GROUP_ID = p_group_id;
      delete from DESCRIPTOR_GROUP_ATTR
       where DESCRIPTOR_GROUP_ID = p_group_id;
      delete from DESCRIPTOR_GROUP
       where DESCRIPTOR_GROUP_ID = p_group_id;
    end;


    --Уменьшает SORT_ORDER всех атрибутов справочника
    --если атрибут удаляется
    --Должна быть вызвана перед операцией DELETE атрибута
    procedure ATTR_ORDER_DECREASE(
        p_attr_id   in  DESCRIPTOR_GROUP_ATTR.DESCRIPTOR_GROUP_ATTR_ID%TYPE)
    is
      v_group_id  DESCRIPTOR_GROUP.DESCRIPTOR_GROUP_ID%TYPE;
      v_order     DESCRIPTOR_GROUP_ATTR.SORT_ORDER%TYPE;
    begin
      select DESCRIPTOR_GROUP_ID, SORT_ORDER
        into v_group_id, v_order
        from DESCRIPTOR_GROUP_ATTR
       where DESCRIPTOR_GROUP_ATTR_ID = p_attr_id;

      update DESCRIPTOR_GROUP_ATTR
         set SORT_ORDER = SORT_ORDER - 1
       where DESCRIPTOR_GROUP_ID = v_group_id
         and SORT_ORDER         >= v_order;

    end;


    --Удаляет атрибут, даже если к нему привязаны значения справочника
    --Вызывается, когда пользователь подтверждает удаление атрибута
    procedure FORCE_REMOVE_ATTR(
        p_attr_id   in  DESCRIPTOR_GROUP_ATTR.DESCRIPTOR_GROUP_ATTR_ID%TYPE)
    is
    begin
      ATTR_ORDER_DECREASE(p_attr_id);
      delete from DESCRIPTOR_VALUE_ATTR
       where DESCRIPTOR_GROUP_ATTR_ID = p_attr_id;
      delete from DESCRIPTOR_GROUP_ATTR
       where DESCRIPTOR_GROUP_ATTR_ID = p_attr_id;
    end;


    --Уменьшает SORT_ORDER всех значений справочника с учётом иерархии
    --если значение привязывается к другому узлу или удаляется
    --Должна быть вызвана перед операцией DELETE или UPDATE PARENT_VALUE_ID значения
    procedure VAL_ORDER_DECREASE(
        p_value_id  in  DESCRIPTOR_VALUE.DESCRIPTOR_VALUE_ID%TYPE)
    is
      v_group_id  DESCRIPTOR_VALUE.DESCRIPTOR_GROUP_ID%TYPE;
      v_parent_id DESCRIPTOR_VALUE.PARENT_VALUE_ID%TYPE;
      v_order     DESCRIPTOR_VALUE.SORT_ORDER%TYPE;
    begin
      select DESCRIPTOR_GROUP_ID, PARENT_VALUE_ID, SORT_ORDER
        into v_group_id, v_parent_id, v_order
        from DESCRIPTOR_VALUE
       where DESCRIPTOR_VALUE_ID = p_value_id;

      update DESCRIPTOR_VALUE
         set SORT_ORDER = SORT_ORDER - 1
       where DESCRIPTOR_GROUP_ID     = v_group_id
         and nvl(PARENT_VALUE_ID, 0) = nvl(v_parent_id, 0)
         and SORT_ORDER             >= v_order;

    end;


    --Возвращает chr(1), если переданное строковое значение "больше", чем заданный порог
    --Используется при сортировке
    function SORT_BY_PATH(
        p_value     in  varchar2,
        p_threshold in  varchar2)
    return varchar2
    is
    begin
      if p_value > p_threshold then
        return chr(1);
      else
        return p_value;
      end if;
    end;


    --Возвращает 0, если переданное значение больше, чем заданный порог
    --Используется при сортировке
    function SORT_BY_ROWNUM(
        p_value     in  number,
        p_threshold in  number)
    return number
    is
    begin
      if p_value > p_threshold then
        return 0;
      else
        return p_value;
      end if;
    end;


    --Возвращает ID значения справочника по коду справочника и коду значения
    function GET_VALUE_ID_BY_CODE(
        p_group_code    in  DESCRIPTOR_GROUP.GROUP_CODE%TYPE,
        p_value_code    in  DESCRIPTOR_VALUE.VALUE_CODE%TYPE)
    return DESCRIPTOR_VALUE.DESCRIPTOR_VALUE_ID%TYPE
    is
      v_value_id  DESCRIPTOR_VALUE.DESCRIPTOR_VALUE_ID%TYPE;
    begin
      select DV.DESCRIPTOR_VALUE_ID into v_value_id
        from DESCRIPTOR_VALUE DV
       inner join DESCRIPTOR_GROUP DG
               on DV.DESCRIPTOR_GROUP_ID = DG.DESCRIPTOR_GROUP_ID
       where DG.GROUP_CODE = p_group_code
         and DV.VALUE_CODE = p_value_code;

      return v_value_id;
    end;


    --Определяет тип элемента организационной структуры, возвращает код
    function GET_ORG_STRUCTURE_TYPE(
        p_value_id  in  DESCRIPTOR_VALUE.DESCRIPTOR_VALUE_ID%TYPE)
    return DESCRIPTOR_VALUE.VALUE_CODE%TYPE
    is
      v_structure_type    DESCRIPTOR_VALUE.VALUE_CODE%TYPE;
    begin
      select DV2.VALUE_CODE into v_structure_type
        from DESCRIPTOR_VALUE DV1
       inner join DESCRIPTOR_VALUE_ATTR DVA
               on DV1.DESCRIPTOR_VALUE_ID = DVA.DESCRIPTOR_VALUE_ID
       inner join DESCRIPTOR_GROUP_ATTR DGA
               on DVA.DESCRIPTOR_GROUP_ATTR_ID = DGA.DESCRIPTOR_GROUP_ATTR_ID
              and DGA.ATTR_CODE = 'ORG_STRUCTURE_TYPE'
       inner join DESCRIPTOR_VALUE DV2
               on DVA.REF_DESCRIPTOR_VALUE_ID = DV2.DESCRIPTOR_VALUE_ID
       where DV1.DESCRIPTOR_VALUE_ID = p_value_id;

      return v_structure_type;
    end;


    --Возвращает путь по иерархии из полных значений
    function GET_FULL_PATH(
        p_value_id  in  DESCRIPTOR_VALUE.DESCRIPTOR_VALUE_ID%TYPE)
    return varchar2
    is
      v_path  varchar2(4000);
    begin
      for R in (select FULL_VALUE
                  from DESCRIPTOR_VALUE
               connect by prior PARENT_VALUE_ID = DESCRIPTOR_VALUE_ID
                 start with DESCRIPTOR_VALUE_ID = p_value_id
                 order by LEVEL desc)
      loop
        if v_path is null then
          v_path := R.FULL_VALUE;
        else
          v_path := v_path || '->' || R.FULL_VALUE;
        end if;
      end loop;

      return v_path;
    end;


    --Возвращает путь по иерархии из сокращённых значений
    function GET_SHORT_PATH(
        p_value_id  in  DESCRIPTOR_VALUE.DESCRIPTOR_VALUE_ID%TYPE)
    return varchar2
    is
      v_path  varchar2(4000);
    begin
      for R in (select SHORT_VALUE
                  from DESCRIPTOR_VALUE
               connect by prior PARENT_VALUE_ID = DESCRIPTOR_VALUE_ID
                 start with DESCRIPTOR_VALUE_ID = p_value_id
                 order by LEVEL desc)
      loop
        if v_path is null then
          v_path := R.SHORT_VALUE;
        else
          v_path := v_path || '->' || R.SHORT_VALUE;
        end if;
      end loop;

      return v_path;
    end;

    --Возвращает путь по иерархии из идентификаторов
    function GET_ID_PATH(
        p_value_id  in  DESCRIPTOR_VALUE.DESCRIPTOR_VALUE_ID%TYPE)
    return varchar2
    is
      v_path  varchar2(4000);
    begin
      for R in (select DESCRIPTOR_VALUE_ID
                  from DESCRIPTOR_VALUE
               connect by prior PARENT_VALUE_ID = DESCRIPTOR_VALUE_ID
                 start with DESCRIPTOR_VALUE_ID = p_value_id
                 order by LEVEL desc)
      loop
        if v_path is null then
          v_path := R.DESCRIPTOR_VALUE_ID;
        else
          v_path := v_path || '->' || R.DESCRIPTOR_VALUE_ID;
        end if;
      end loop;

      return v_path;
    end;

    --Возвращает сквозной порядковый номер в иерархии (сортировка по полным значениям)
    function GET_FULL_PATH_ROWNUM(
        p_value_id  in  DESCRIPTOR_VALUE.DESCRIPTOR_VALUE_ID%TYPE)
    return number
    is
      v_rownum    number(10);
    begin
      select ROW_NUM into v_rownum
        from (select --row_number() over(order by SYS_CONNECT_BY_PATH(upper(FULL_VALUE), '->')) as ROW_NUM,
                     rownum as ROW_NUM, DESCRIPTOR_VALUE_ID
                from DESCRIPTOR_VALUE
             connect by prior DESCRIPTOR_VALUE_ID = PARENT_VALUE_ID
               start with PARENT_VALUE_ID is null
                      and DESCRIPTOR_GROUP_ID = (select DESCRIPTOR_GROUP_ID
                                                   from DESCRIPTOR_VALUE
                                                  where DESCRIPTOR_VALUE_ID = p_value_id)
               order siblings by upper(FULL_VALUE))
       where DESCRIPTOR_VALUE_ID = p_value_id;

      return v_rownum;
    end;

    --Возвращает сквозной порядковый номер в иерархии (сортировка по сокращённым значениям)
    function GET_SHORT_PATH_ROWNUM(
        p_value_id  in  DESCRIPTOR_VALUE.DESCRIPTOR_VALUE_ID%TYPE)
    return number
    is
      v_rownum    number(10);
    begin
      select ROW_NUM into v_rownum
        from (select --row_number() over(order by SYS_CONNECT_BY_PATH(upper(SHORT_VALUE), '->')) as ROW_NUM,
                     rownum as ROW_NUM, DESCRIPTOR_VALUE_ID
                from DESCRIPTOR_VALUE
             connect by prior DESCRIPTOR_VALUE_ID = PARENT_VALUE_ID
               start with PARENT_VALUE_ID is null
                      and DESCRIPTOR_GROUP_ID = (select DESCRIPTOR_GROUP_ID
                                                   from DESCRIPTOR_VALUE
                                                  where DESCRIPTOR_VALUE_ID = p_value_id)
               order siblings by upper(SHORT_VALUE))
       where DESCRIPTOR_VALUE_ID = p_value_id;

      return v_rownum;
    end;

    --Возвращает сквозной порядковый номер в иерархии (сортировка по порядковому номеру)
    function GET_ORDER_ROWNUM(
        p_value_id  in  DESCRIPTOR_VALUE.DESCRIPTOR_VALUE_ID%TYPE)
    return number
    is
      v_rownum    number(10);
    begin
      select ROW_NUM into v_rownum
        from (select rownum as ROW_NUM, DESCRIPTOR_VALUE_ID
                from DESCRIPTOR_VALUE
             connect by prior DESCRIPTOR_VALUE_ID = PARENT_VALUE_ID
               start with PARENT_VALUE_ID is null
                      and DESCRIPTOR_GROUP_ID = (select DESCRIPTOR_GROUP_ID
                                                   from DESCRIPTOR_VALUE
                                                  where DESCRIPTOR_VALUE_ID = p_value_id)
               order siblings by SORT_ORDER)
       where DESCRIPTOR_VALUE_ID = p_value_id;

      return v_rownum;

    end;


END; --DESCRIPTOR_PACK

/
--------------------------------------------------------
--  DDL for Package Body STORAGE_PACK
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "SIC"."STORAGE_PACK" 
IS

   procedure INDEX_ORG_NAMES(
       p_rowid     in      ROWID,
       o_result    in out  CLOB)
   is
   begin
       for R in (select SON.FULL_NAME, SON.SHORT_NAME
                   from STRG_ORGANIZATION SO
                  inner join STRG_ORG_NAME SON
                          on SO.ORGANIZATION_ID = SON.ORGANIZATION_ID
                  where SO.ROWID = p_rowid)
       loop
           DBMS_LOB.WRITEAPPEND(o_result, LENGTH(R.FULL_NAME) + 1, R.FULL_NAME || ' ');
           if R.SHORT_NAME is not null then
               DBMS_LOB.WRITEAPPEND(o_result, LENGTH(R.SHORT_NAME) + 1, R.SHORT_NAME || ' ');
           end if;
       end loop;
   end;


   function GET_FUND_FULL_NUMBER(
       p_num       in  STRG_FUND.FUND_NUM%TYPE,
       p_prefix    in  STRG_FUND.PREFIX%TYPE,
       p_suffix    in  STRG_FUND.SUFFIX%TYPE)
   return varchar2
   is
       v_res   varchar2(50);
   begin
       if p_prefix is not null then
           v_res := p_prefix || '-';
       end if;
       v_res := v_res || to_char(p_num);
       if p_suffix is not null then
           v_res := v_res || '-' || p_suffix;
       end if;
       return v_res;
   end;


   function GET_ORG_STORAGE_YEARS(
       p_org_id    in  STRG_ORGANIZATION.ORGANIZATION_ID%TYPE)
   return varchar2
   is
       iv_begin    number(4);
       iv_end      number(4);
       res         varchar2(300);
   begin
       for R in (select SPO.BEGIN_YEAR, SPO.END_YEAR
                   from STRG_PLACE_ORG SPO
                  where ORGANIZATION_ID = p_org_id
                  order by SPO.BEGIN_YEAR, SPO.END_YEAR)
       loop
           if R.BEGIN_YEAR > nvl(iv_end, 0) + 1 then
               if iv_begin is not null then
                   res := res || to_char(iv_begin);
                   if iv_end > iv_begin then
                       res := res || '-' || to_char(iv_end);
                   end if;
                   res := res || ', ';
               end if;
               iv_begin := R.BEGIN_YEAR;
           end if;
           if R.END_YEAR > nvl(iv_end, 0) then
               iv_end := R.END_YEAR;
           end if;
       end loop;
       res := res || to_char(iv_begin);
       if iv_end > iv_begin then
           res := res || '-' || to_char(iv_end);
       end if;
       return res;
   end;


END;

/
--------------------------------------------------------
--  DDL for Package Body UPIZ_PACK
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "SIC"."UPIZ_PACK" 
IS
    res   VARCHAR2 (4000);

    FUNCTION get_person_short_fio (p_personid IN NUMBER)
        RETURN VARCHAR2
    IS
    BEGIN
        res := NULL;

        FOR c IN (SELECT   *
                    FROM   ADM_EMPLOYEE
                   WHERE   EMPLOYEE_ID = p_personid)
        LOOP
            res := c.LAST_NAME;

            IF c.FIRST_NAME IS NOT NULL
            THEN
                res := res || ' ' || SUBSTR (c.FIRST_NAME, 1, 1) || '.';

                IF c.MIDDLE_NAME IS NOT NULL
                THEN
                    res := res || ' ' || SUBSTR (c.MIDDLE_NAME, 1, 1) || '.';
                END IF;
            END IF;
        END LOOP;

        RETURN res;
    END get_person_short_fio;

    FUNCTION get_arch_number (p_rr_zakaz_id IN rr_zakaz.irr_zakazid%TYPE)
        RETURN VARCHAR2
    IS
        v_res   VARCHAR2 (1000);
    BEGIN
        FOR r IN (SELECT   fond_num, opis_num, delo_num
                    FROM   rr_zakaz_content
                   WHERE   irr_zakazid = p_rr_zakaz_id)
        LOOP
            IF v_res IS NOT NULL
            THEN
                v_res := v_res || '; ';
            END IF;

            v_res :=
                   v_res
                || 'Ф.'
                || r.fond_num
                || ' О.'
                || r.opis_num
                || ' Д.'
                || r.delo_num;
        END LOOP;

        RETURN v_res;
    END;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_SIC_QUESTION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE PROCEDURE "SIC"."UPDATE_SIC_QUESTION" AS 
BEGIN
  delete from SIC_QUESTION;
  for it in (select qq_question.question_id as id,
                    CONTENT,
                    PREFIX_NUM,
                    MOTIVATED_REFUSAL,

                    OBJECT_MNAME,
                    OBJECT_FNAME,
                    OBJECT_LNAME,
                    OBJECT_BIRTHYEAR,
                    ANSWER_FORM_TYPE_ID,
                    EXEC_ORG_ID,
                    LITERA_ID,
                    QUESTION_TYPE_ID,
                    REGISTRATOR_ID,
                    STATUS_ID,
                    TRANSFER_TYPE_ID,
                    SUFIX_NUM,
                    NOTIFY_STATUS_ID,
                    APPENDS,
                    ADDRESS,
                    ORGANIZATION,
                    COUNTRY,
                    MIDDLE_NAME,

                    ISSUE_DOC_NUM,
                    FIRST_NAME,
                    FIO_JUR_PERSON,
                    PHONE,
                    LAST_NAME,
                    APPLICANT_CATEGORY_ID,
                    APPLICANT_TYPE_ID,

                    DELIVERY_TYPE_ID,
                    DOC_TYPE_ID,
                    qq_notification.EXECUTOR_ID as noti_exec_id,

                    TO_WHOM,
                    CONTROL,
                    RESOLUTION_AUTHOR,
                    
                    STORAGE_NAME,
                    qq_transmission.EXECUTOR_ID as executor_id,
                    BOSS_EXECUTOR_ID,
                    STORAGE_TERRITORY_ID,
                    ANSWER_RESULT_ID,
                    CATEGORY_COMPLEXITY_ID,
                    USAGE_ANSWER_ID,                  
                    REFERENCE,
                    REMARK,
                    ISSUE_NUMBER,
                    qq_execution.RENEWAL_NOTICE as RENEWAL_NOTICE,
                    EXEC_DATE,
                    ISSUE_DATE,
                    NOTIFICATION_DATE,
                    ISSUE_DOC_DATE,
                    PLANNED_FINISH_DATE,
                    REG_DATE,CONTROL_DATE,
                    EXECUTION_DATE,
                    BOSS_EXECUTION_DATE
  from qq_question LEFT OUTER JOIN qq_applicant on
  qq_question.QUESTION_ID = qq_applicant.QUESTION_ID
 LEFT OUTER JOIN qq_transmission on
 qq_question.QUESTION_ID = qq_transmission.QUESTION_ID
 LEFT OUTER JOIN qq_notification on
 qq_question.QUESTION_ID = qq_notification.QUESTION_ID
  LEFT OUTER JOIN qq_execution on 
  qq_question.QUESTION_ID = qq_execution.QUESTION_ID
  LEFT OUTER JOIN QQ_WAY_TO_SEND on
  qq_question.QUESTION_ID = qq_way_to_send.QUESTION_ID) LOOP
      INSERT INTO sic_question(ID,
                              LITERA_ID,
                              PREFIX_VHOD_DOC,
                              SUFIX_VHOD_DOC,
                              
                              SPOSOB_PEREDACHI_ID,
                              EXEC_ORG_ID,
                              REGISTRATOR_ID,
                              QUESTION_VID_ID,
                              
                              CONTENT,
                              FORM_VYDACHI_ANS_ID,
                              MOTIV_OTKAZ,
                              TIP_ZAYAV_ID,
                              FAMALY,
                              NAME,
                              OTCHESTVO,
                              COUNTRY,
                              ADRES,
                              PHONE,
                              ORGANIZATION,
                              CATEGOR_ZAYAV_ID,
                              NUM_ISHOD_DOC,
                             
                              FIO_KTO_PODPISAL_ISHOD_DOC,
                              PRILOGENIYA,
                              NA_KOGO_Q_FAMALY,
                              NA_KOGO_Q_NAME,
                              NA_KOGO_Q_OTCHESTVO,
                              NA_KOGO_Q_GOD_ROJDENIYA,
                              NOTI_EXECUTOR_ID,
                              TIP_DOCS_ID,
                              NOTI_KOMU,
                             
                              NOTI_SPOSOB_PEREDACHI_ID,
                              
                              BOSS_EXECUTOR_ID,
                             
                              EXECUTOR_ID,
                             
                              CONTROL,
                             
                              RESOLUTION_AUTHOR,
                              STORAGE_TERRITORY_ID,
                              STORAGE_NAME,

                              ANS_RESULT_ID,
                              TEMATIC_ANS_ID,
                              RECOMENDATION,
                              CAT_SLOJNOSTI_ID,
                              NUM_ISHODYACHEGO,
                              PRIMECHANIE,
                              STATUS_ID,
                              NOTI_STATUS_ID,
                              NOTI_PRODLENIE,
                              REG_DATE,
                              PLAN_EXEC_DATE,
                              DATE_ISHOD_DOC,
                              NOTI_DATE,
                              NOTI_DATE_OTPRAVKI_DOC,
                              BOSS_EXECUTOR_DATE,
                              EXECUTOR_DATE,
                              CONTROL_DATE,
                              EXEC_DATE
                              )
     VALUES(it.id, it.litera_id, it.prefix_num, it.sufix_num, 
            it.transfer_type_id, it.exec_org_id, it.registrator_id,
            it.question_type_id,  it.CONTENT,
            it.ANSWER_FORM_TYPE_ID, it.MOTIVATED_REFUSAL, it.APPLICANT_TYPE_ID,
            it.LAST_NAME, it.FIRST_NAME, it.MIDDLE_NAME, it.COUNTRY,
            it.ADDRESS, it.PHONE, it.ORGANIZATION, it.APPLICANT_CATEGORY_ID,
            it.ISSUE_DOC_NUM,  it.FIO_JUR_PERSON,
            it.APPENDS, it.OBJECT_LNAME, it.OBJECT_FNAME, it.OBJECT_MNAME,
            it.OBJECT_BIRTHYEAR, it.noti_exec_id, it.DOC_TYPE_ID,
            it.TO_WHOM, it.DELIVERY_TYPE_ID,
            it.BOSS_EXECUTOR_ID, it.EXECUTOR_ID,  it.CONTROL, 
            it.RESOLUTION_AUTHOR,it.STORAGE_TERRITORY_ID,it.STORAGE_NAME,
            it.ANSWER_RESULT_ID,it.USAGE_ANSWER_ID,
            it.REFERENCE,it.CATEGORY_COMPLEXITY_ID,it.ISSUE_NUMBER,it.REMARK,
            it.STATUS_ID,it.NOTIFY_STATUS_ID,
            it.RENEWAL_NOTICE,
            it.reg_date, it.PLANNED_FINISH_DATE, it.ISSUE_DOC_DATE, 
            it.NOTIFICATION_DATE,it.ISSUE_DATE,it.BOSS_EXECUTION_DATE,
            it.EXECUTION_DATE,it.CONTROL_DATE,it.EXEC_DATE);
  END LOOP;
END UPDATE_SIC_QUESTION;

/
